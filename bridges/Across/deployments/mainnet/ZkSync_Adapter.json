{
  "address": "0xE233009838CB898b50e0012a6E783FC9FeE447FB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract WETH9Interface",
          "name": "_l1Weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2RefundAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "canonicalTxHash",
          "type": "bytes32"
        }
      ],
      "name": "ZkSyncMessageRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L2_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL1CallValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Weth",
      "outputs": [
        {
          "internalType": "contract WETH9Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2RefundAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkErc20Bridge",
      "outputs": [
        {
          "internalType": "contract ZkBridgeLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkSyncEthBridge",
      "outputs": [
        {
          "internalType": "contract ZkSyncInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zkSyncMessageBridge",
      "outputs": [
        {
          "internalType": "contract ZkSyncInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8831cea076259e48ef3d8842964f0b7960d5f5da6766649d024e7b61d644662c",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0xE233009838CB898b50e0012a6E783FC9FeE447FB",
    "transactionIndex": 101,
    "gasUsed": "983465",
    "logsBloom": "0x
    "blockHash": "0x63561a6459db4b1ae7f109d701cef1b7d28a81713af04c75fbe8e6fd21c9f5bc",
    "transactionHash": "0x8831cea076259e48ef3d8842964f0b7960d5f5da6766649d024e7b61d644662c",
    "logs": [],
    "blockNumber": 17842162,
    "cumulativeGasUsed": "14244806",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010"],
  "numDeployments": 3,
  "solcInputHash": "3ccdbc3aec7e5d23f67dc8d79b0046b9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract WETH9Interface\",\"name\":\"_l1Weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2RefundAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"canonicalTxHash\",\"type\":\"bytes32\"}],\"name\":\"ZkSyncMessageRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1CallValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Weth\",\"outputs\":[{\"internalType\":\"contract WETH9Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2RefundAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkErc20Bridge\",\"outputs\":[{\"internalType\":\"contract ZkBridgeLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkSyncEthBridge\",\"outputs\":[{\"internalType\":\"contract ZkSyncInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkSyncMessageBridge\",\"outputs\":[{\"internalType\":\"contract ZkSyncInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_l1Weth\":\"WETH address on L1.\",\"_l2RefundAddress\":\"address that recieves excess gas refunds on L2.\"}},\"getL1CallValue()\":{\"returns\":{\"_0\":\"amount of ETH that this contract needs to hold in order for relayMessage to succeed.\"}},\"relayMessage(address,bytes)\":{\"params\":{\"message\":\"Data to send to target.\",\"target\":\"Contract on L2 that will receive message.\"}},\"relayTokens(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of L1 tokens to deposit and L2 tokens to receive.\",\"l1Token\":\"L1 token to deposit.\",\"l2Token\":\"L2 token to receive.\",\"to\":\"Bridge recipient.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs new Adapter.\"},\"getL1CallValue()\":{\"notice\":\"Returns required amount of ETH to send a message.\"},\"relayMessage(address,bytes)\":{\"notice\":\"Send cross-chain message to target on ZkSync.This contract must hold at least getL1CallValue() amount of ETH to send a message, or the message will revert.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Bridge tokens to ZkSync.This contract must hold at least getL1CallValue() amount of ETH to send a message or the message will revert.\"}},\"notice\":\"Contract containing logic to send messages from L1 to ZkSync.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/ZkSync_Adapter.sol\":\"ZkSync_Adapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/chain-adapters/ZkSync_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/AdapterInterface.sol\\\";\\nimport \\\"../external/interfaces/WETH9Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface ZkSyncInterface {\\n    // _contractL2: L2 address of the contract to be called.\\n    // _l2Value: Amount of ETH to pass with the call to L2; used as msg.value for the transaction.\\n    // _calldata: Calldata of the transaction call; encoded the same way as in Ethereum.\\n    // _l2GasLimit: Gas limit of the L2 transaction call.\\n    // _l2GasPerPubdataByteLimit: A constant representing how much gas is required to publish a byte of data from\\n    //  L1 to L2. https://era.zksync.io/docs/api/js/utils.html#gas\\n    // _factoryDeps: Bytecodes array containing the bytecode of the contract being deployed.\\n    //  If the contract is a factory contract, the array contains the bytecodes of the contracts it can deploy.\\n    // _refundRecipient: Address that receives the rest of the fee after the transaction execution.\\n    //  If refundRecipient == 0, L2 msg.sender is used. Note: If the _refundRecipient is a smart contract,\\n    //  then during the L1 to L2 transaction its address is aliased.\\n    function requestL2Transaction(\\n        address _contractL2,\\n        uint256 _l2Value,\\n        bytes calldata _calldata,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit,\\n        bytes[] calldata _factoryDeps,\\n        address _refundRecipient\\n    ) external payable returns (bytes32 canonicalTxHash);\\n\\n    // @notice Estimates the cost in Ether of requesting execution of an L2 transaction from L1\\n    // @param _l1GasPrice Effective gas price on L1 (priority fee + base fee)\\n    // @param _l2GasLimit Gas limit for the L2 transaction\\n    // @param _l2GasPerPubdataByteLimit Gas limit for the L2 transaction per byte of pubdata\\n    // @return The estimated L2 gas for the transaction to be paid\\n    function l2TransactionBaseCost(\\n        uint256 _l1GasPrice,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit\\n    ) external view returns (uint256);\\n}\\n\\ninterface ZkBridgeLike {\\n    // @dev: Use ZkSyncInterface.requestL2Transaction to bridge WETH as ETH to L2.\\n    function deposit(\\n        address _l2Receiver,\\n        address _l1Token,\\n        uint256 _amount,\\n        uint256 _l2TxGasLimit,\\n        uint256 _l2TxGasPerPubdataByte,\\n        address _refundRecipient\\n    ) external payable returns (bytes32 txHash);\\n}\\n\\n// Note: this contract just forwards the calls from the HubPool to ZkSync to avoid limits.\\n// A modified ZKSync_Adapter should be deployed with this address swapped in for all zkSync addresses.\\ncontract LimitBypassProxy is ZkSyncInterface, ZkBridgeLike {\\n    using SafeERC20 for IERC20;\\n    ZkSyncInterface public constant zkSync = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);\\n    ZkBridgeLike public constant zkErc20Bridge = ZkBridgeLike(0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063);\\n\\n    function l2TransactionBaseCost(\\n        uint256 _l1GasPrice,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit\\n    ) external view returns (uint256) {\\n        return zkSync.l2TransactionBaseCost(_l1GasPrice, _l2GasLimit, _l2GasPerPubdataByteLimit);\\n    }\\n\\n    function requestL2Transaction(\\n        address _contractL2,\\n        uint256 _l2Value,\\n        bytes calldata _calldata,\\n        uint256 _l2GasLimit,\\n        uint256 _l2GasPerPubdataByteLimit,\\n        bytes[] calldata _factoryDeps,\\n        address _refundRecipient\\n    ) external payable returns (bytes32 canonicalTxHash) {\\n        return\\n            zkSync.requestL2Transaction{ value: msg.value }(\\n                _contractL2,\\n                _l2Value,\\n                _calldata,\\n                _l2GasLimit,\\n                _l2GasPerPubdataByteLimit,\\n                _factoryDeps,\\n                _refundRecipient\\n            );\\n    }\\n\\n    function deposit(\\n        address _l2Receiver,\\n        address _l1Token,\\n        uint256 _amount,\\n        uint256 _l2TxGasLimit,\\n        uint256 _l2TxGasPerPubdataByte,\\n        address _refundRecipient\\n    ) external payable returns (bytes32 txHash) {\\n        IERC20(_l1Token).safeIncreaseAllowance(address(zkErc20Bridge), _amount);\\n        return\\n            zkErc20Bridge.deposit{ value: msg.value }(\\n                _l2Receiver,\\n                _l1Token,\\n                _amount,\\n                _l2TxGasLimit,\\n                _l2TxGasPerPubdataByte,\\n                _refundRecipient\\n            );\\n    }\\n}\\n\\n/**\\n * @notice Contract containing logic to send messages from L1 to ZkSync.\\n * @dev Public functions calling external contracts do not guard against reentrancy because they are expected to be\\n * called via delegatecall, which will execute this contract's logic within the context of the originating contract.\\n * For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods\\n * that call this contract's logic guard against reentrancy.\\n */\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract ZkSync_Adapter is AdapterInterface {\\n    using SafeERC20 for IERC20;\\n\\n    // We need to pay a base fee to the operator to include our L1 --> L2 transaction.\\n    // https://era.zksync.io/docs/dev/developer-guides/bridging/l1-l2.html#getting-the-base-cost\\n\\n    // Generally, the following params are a bit hard to set and may change in the future once ZkSync\\n    // goes live. For now, we'll hardcode these and use aggressive values to ensure inclusion.\\n\\n    // Limit on L2 gas to spend.\\n    uint256 public constant L2_GAS_LIMIT = 2_000_000;\\n\\n    // How much gas is required to publish a byte of data from L1 to L2. 800 is the required value\\n    // as set here https://github.com/matter-labs/era-contracts/blob/6391c0d7bf6184d7f6718060e3991ba6f0efe4a7/ethereum/contracts/zksync/facets/Mailbox.sol#L226\\n    // Note, this value can change and will require an updated adapter.\\n    uint256 public constant L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT = 800;\\n\\n    // This address receives any remaining fee after an L1 to L2 transaction completes.\\n    // If refund recipient = address(0) then L2 msg.sender is used, unless msg.sender is a contract then its address\\n    // gets aliased.\\n    address public immutable l2RefundAddress;\\n\\n    // Hardcode the following ZkSync system contract addresses to save gas on construction. This adapter can be\\n    // redeployed in the event that the following addresses change.\\n\\n    // Main contract used to send L1 --> L2 messages. Fetchable via `zks_getMainContract` method on JSON RPC.\\n    ZkSyncInterface public constant zkSyncMessageBridge = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);\\n\\n    // Contract used to send ETH to L2. Note: this is the same address as the main contract, but separated to allow\\n    // only this contract to be swapped (leaving the main zkSync contract to be used for messaging).\\n    ZkSyncInterface public constant zkSyncEthBridge = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);\\n\\n    // Bridges to send ERC20 and ETH to L2. Fetchable via `zks_getBridgeContracts` method on JSON RPC.\\n    ZkBridgeLike public constant zkErc20Bridge = ZkBridgeLike(0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063);\\n\\n    // Set l1Weth at construction time to make testing easier.\\n    WETH9Interface public immutable l1Weth;\\n\\n    event ZkSyncMessageRelayed(bytes32 canonicalTxHash);\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _l1Weth WETH address on L1.\\n     * @param _l2RefundAddress address that recieves excess gas refunds on L2.\\n     */\\n    constructor(WETH9Interface _l1Weth, address _l2RefundAddress) {\\n        l1Weth = _l1Weth;\\n        l2RefundAddress = _l2RefundAddress;\\n    }\\n\\n    /**\\n     * @notice Send cross-chain message to target on ZkSync.\\n     * @notice This contract must hold at least getL1CallValue() amount of ETH to send a message, or the message\\n     * will revert.\\n     * @param target Contract on L2 that will receive message.\\n     * @param message Data to send to target.\\n     */\\n    function relayMessage(address target, bytes memory message) external payable override {\\n        uint256 txBaseCost = _contractHasSufficientEthBalance();\\n\\n        // Returns the hash of the requested L2 transaction. This hash can be used to follow the transaction status.\\n        bytes32 canonicalTxHash = zkSyncMessageBridge.requestL2Transaction{ value: txBaseCost }(\\n            target,\\n            // We pass no ETH with the call, otherwise we'd need to add to the txBaseCost this value.\\n            0,\\n            message,\\n            L2_GAS_LIMIT,\\n            L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT,\\n            new bytes[](0),\\n            l2RefundAddress\\n        );\\n\\n        emit MessageRelayed(target, message);\\n        emit ZkSyncMessageRelayed(canonicalTxHash);\\n    }\\n\\n    /**\\n     * @notice Bridge tokens to ZkSync.\\n     * @notice This contract must hold at least getL1CallValue() amount of ETH to send a message\\n     * or the message will revert.\\n     * @param l1Token L1 token to deposit.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of L1 tokens to deposit and L2 tokens to receive.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token, // l2Token is unused.\\n        uint256 amount,\\n        address to\\n    ) external payable override {\\n        // This could revert if the relay amount is over the ZkSync deposit\\n        // limit: https://github.com/matter-labs/era-contracts/blob/main/ethereum/contracts/common/AllowList.sol#L150\\n        // We should make sure that the limit is either set very high or we need to do logic\\n        // that splits the amount to deposit into multiple chunks. We can't have\\n        // this function revert or the HubPool will not be able to proceed to the\\n        // next bundle. See more here:\\n        // https://github.com/matter-labs/era-contracts/blob/main/docs/Overview.md#deposit-limitation\\n        // https://github.com/matter-labs/era-contracts/blob/6391c0d7bf6184d7f6718060e3991ba6f0efe4a7/ethereum/contracts/zksync/facets/Mailbox.sol#L230\\n        uint256 txBaseCost = _contractHasSufficientEthBalance();\\n\\n        // If the l1Token is WETH then unwrap it to ETH then send the ETH to the standard bridge along with the base\\n        // cost. I've tried sending WETH over the erc20Bridge directly but we receive the wrong WETH\\n        // on the L2 side. So, we need to unwrap the WETH into ETH and then send.\\n        bytes32 txHash;\\n        if (l1Token == address(l1Weth)) {\\n            l1Weth.withdraw(amount);\\n            // We cannot call the standard ERC20 bridge because it disallows ETH deposits.\\n            txHash = zkSyncEthBridge.requestL2Transaction{ value: txBaseCost + amount }(\\n                to,\\n                amount,\\n                \\\"\\\",\\n                L2_GAS_LIMIT,\\n                L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT,\\n                new bytes[](0),\\n                l2RefundAddress\\n            );\\n        } else {\\n            IERC20(l1Token).safeIncreaseAllowance(address(zkErc20Bridge), amount);\\n            txHash = zkErc20Bridge.deposit{ value: txBaseCost }(\\n                to,\\n                l1Token,\\n                amount,\\n                L2_GAS_LIMIT,\\n                L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT,\\n                l2RefundAddress\\n            );\\n        }\\n\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n        emit ZkSyncMessageRelayed(txHash);\\n    }\\n\\n    /**\\n     * @notice Returns required amount of ETH to send a message.\\n     * @return amount of ETH that this contract needs to hold in order for relayMessage to succeed.\\n     */\\n    function getL1CallValue() public view returns (uint256) {\\n        // - tx.gasprice returns effective_gas_price. It's also used by Mailbox contract to estimate L2GasPrice\\n        // so using tx.gasprice should always pass this check that msg.value >= baseCost + _l2Value\\n        // https://github.com/matter-labs/era-contracts/blob/6391c0d7bf6184d7f6718060e3991ba6f0efe4a7/ethereum/contracts/zksync/facets/Mailbox.sol#L273\\n        // - priority_fee_per_gas = min(transaction.max_priority_fee_per_gas, transaction.max_fee_per_gas - block.base_fee_per_gas)\\n        // - effective_gas_price = priority_fee_per_gas + block.base_fee_per_gas\\n        return\\n            zkSyncMessageBridge.l2TransactionBaseCost(tx.gasprice, L2_GAS_LIMIT, L1_GAS_TO_L2_GAS_PER_PUB_DATA_LIMIT);\\n    }\\n\\n    function _contractHasSufficientEthBalance() internal view returns (uint256 requiredL1CallValue) {\\n        requiredL1CallValue = getL1CallValue();\\n        require(address(this).balance >= requiredL1CallValue, \\\"Insufficient ETH balance\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb5376077b199325fc8c44ac189f93b8b123b55689d34a2c088531ad364243350\",\"license\":\"BUSL-1.1\"},\"contracts/chain-adapters/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n * This interface is implemented by an adapter contract that is deployed on L1.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    /**\\n     * @notice Send message to `target` on L2.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param target L2 address to send message to.\\n     * @param message Message to send to `target`.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    /**\\n     * @notice Send `amount` of `l1Token` to `to` on L2. `l2Token` is the L2 address equivalent of `l1Token`.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param l1Token L1 token to bridge.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of `l1Token` to bridge.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x1d52fcb8b10dc7f260345918c1a90d496a4c9f774402cbd5ebde881b8fed6d50\",\"license\":\"BUSL-1.1\"},\"contracts/external/interfaces/WETH9Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for the WETH9 contract.\\n */\\ninterface WETH9Interface {\\n    /**\\n     * @notice Burn Wrapped Ether and receive native Ether.\\n     * @param wad Amount of WETH to unwrap and send to caller.\\n     */\\n    function withdraw(uint256 wad) external;\\n\\n    /**\\n     * @notice Lock native Ether and mint Wrapped Ether ERC20\\n     * @dev msg.value is amount of Wrapped Ether to mint/Ether to lock.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Get balance of WETH held by `guy`.\\n     * @param guy Address to get balance of.\\n     * @return wad Amount of WETH held by `guy`.\\n     */\\n    function balanceOf(address guy) external view returns (uint256 wad);\\n\\n    /**\\n     * @notice Transfer `wad` of WETH from caller to `guy`.\\n     * @param guy Address to send WETH to.\\n     * @param wad Amount of WETH to send.\\n     * @return ok True if transfer succeeded.\\n     */\\n    function transfer(address guy, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3f7892554ec7f54681fdd3cc18a41346c246c9c1afba016c52990ef77741f718\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c0346100a157601f6111a038819003918201601f19168301916001600160401b038311848410176100a65780849260409485528339810103126100a15780516001600160a01b039182821682036100a1576020015191821682036100a15760a0526080526040516110e390816100bd82396080518181816101ba0152818161037a015281816105e20152610990015260a0518181816104a80152610c100152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c806308f1ed1514610c34578063146bf4b114610bc557806352c8c75c146104155780635e743ef7146103d95780636c9075b71461039e5780638446ec811461032f578063bb3e04b5146102df578063c9f5a053146102da578063cdc2b148146102da5763e6eb8ade1461008b57600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126102d2576100be610c75565b906024359167ffffffffffffffff83116102d657366023840112156102d657826004013591846100ed84610d55565b946100fb6040519687610ce5565b84865236602486830101116102d257846024956020968793018389013786010152826101b761012861103d565b610130610d8f565b936040518096819482937feb67241900000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff809316988960048601528d602486015260e060448601526101978d60e4870190610db3565b91621e8480606487015261032060848701528583030160a4860152610e11565b907f00000000000000000000000000000000000000000000000000000000000000001660c483015203917332400084c286cf3e17e7b677ea9583e60a0003245af19182156102c7578592610273575b507f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f937f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac49161026660405192839283526040878401526040830190610db3565b0390a1604051908152a180f35b9091508281813d83116102c0575b61028b8183610ce5565b810103126102bb5751907f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f610206565b600080fd5b503d610281565b6040513d87823e3d90fd5b5080fd5b8380fd5b610c98565b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c5760206040517357891966931eb4bb6fb81430e6ce0a03aabde0638152f35b80fd5b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c5760206040516103208152f35b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c576020604051621e84808152f35b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c57610448610c75565b6024359073ffffffffffffffffffffffffffffffffffffffff82168203610bc15760643573ffffffffffffffffffffffffffffffffffffffff811681036102d65761049161103d565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016908173ffffffffffffffffffffffffffffffffffffffff85161460001461074757813b15610743576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152868160248183604435978860048401525af18015610738576106ef575b50816105446105cb93602093610e8b565b61054c610d8f565b916040518095819482937feb67241900000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8a166004850152602484015260e060448401528b60e4840152621e84806064840152610320608484015261010060a4840152610104830190610e11565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660c483015203917332400084c286cf3e17e7b677ea9583e60a0003245af19081156102c75785916106b7575b50608060209373ffffffffffffffffffffffffffffffffffffffff7f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f9694817fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b95965b816040519516855216878401526044356040840152166060820152a1604051908152a180f35b90506020939193813d82116106e7575b816106d460209383610ce5565b810103126102bb5751909290608061062e565b3d91506106c7565b67ffffffffffffffff819792971161070b576040529481610533565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6040513d89823e3d90fd5b8580fd5b90506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201527357891966931eb4bb6fb81430e6ce0a03aabde0636024820152604490602081838173ffffffffffffffffffffffffffffffffffffffff89165afa8015610738578790610b8d575b6107ca9150823590610e8b565b604051907f095ea7b30000000000000000000000000000000000000000000000000000000060208301527357891966931eb4bb6fb81430e6ce0a03aabde06360248301528282015281815267ffffffffffffffff81608081011081608084011117610b60576080820160c08301109060c083011117610b33578060c06108e79201604052602060808201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a082015287808251602084018273ffffffffffffffffffffffffffffffffffffffff8b165af1903d15610b295760803d916108b183610d55565b926108bf6040519485610ce5565b83523d8b602085013e5b019173ffffffffffffffffffffffffffffffffffffffff8816610ec7565b8051908115918215610b02575b505015610a7e5760209060c4604051809481937fe8b99b1b00000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8816600484015273ffffffffffffffffffffffffffffffffffffffff89166024840152803590830152621e84806064830152610320608483015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660a48301527357891966931eb4bb6fb81430e6ce0a03aabde0635af19081156102c7578591610a41575b50608060209373ffffffffffffffffffffffffffffffffffffffff7f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f9694817fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9596610691565b90506020939193813d602011610a76575b81610a5f60209383610ce5565b81010312610a72575190929060806109da565b8480fd5b3d9150610a52565b6084907f5361666545524332303a204552433230206f7065726174696f6e20646964206e604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152602a60248401528201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b8192509060209181010312610b2557602001518015158103610b255738806108f4565b8680fd5b60806060916108c9565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b506020813d602011610bb9575b81610ba760209383610ce5565b81010312610b25576107ca90516107bd565b3d9150610b9a565b8280fd5b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c576020610c6d610f97565b604051908152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102bb57565b346102bb5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bb5760206040517332400084c286cf3e17e7b677ea9583e60a0003248152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d2657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111610d2657601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6040516020810181811067ffffffffffffffff821117610d26576040526000815290565b919082519283825260005b848110610dfd5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610dbe565b90808183519182825260208080809401958560051b01019501936000915b848310610e3f5750505050505090565b9091929394958480610e7b837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a51610db3565b9801930193019194939290610e2f565b91908201809211610e9857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91929015610f425750815115610edb575090565b3b15610ee45790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610f555750805190602001fd5b610f93906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610db3565b0390fd5b6040517fb473318e0000000000000000000000000000000000000000000000000000000081523a6004820152621e8480602482015261032060448201526020816064817332400084c286cf3e17e7b677ea9583e60a0003245afa90811561103157600091611003575090565b906020823d8211611029575b8161101c60209383610ce5565b8101031261032c57505190565b3d915061100f565b6040513d6000823e3d90fd5b611045610f97565b9081471061104f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152fdfea2646970667358221220bff645f26f4ee22fe6f4ac5d9e1de3e44447a5b9b0a1de51b75e9b931343de0664736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c806308f1ed1514610c34578063146bf4b114610bc557806352c8c75c146104155780635e743ef7146103d95780636c9075b71461039e5780638446ec811461032f578063bb3e04b5146102df578063c9f5a053146102da578063cdc2b148146102da5763e6eb8ade1461008b57600080fd5b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040813601126102d2576100be610c75565b906024359167ffffffffffffffff83116102d657366023840112156102d657826004013591846100ed84610d55565b946100fb6040519687610ce5565b84865236602486830101116102d257846024956020968793018389013786010152826101b761012861103d565b610130610d8f565b936040518096819482937feb67241900000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff809316988960048601528d602486015260e060448601526101978d60e4870190610db3565b91621e8480606487015261032060848701528583030160a4860152610e11565b907f00000000000000000000000000000000000000000000000000000000000000001660c483015203917332400084c286cf3e17e7b677ea9583e60a0003245af19182156102c7578592610273575b507f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f937f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac49161026660405192839283526040878401526040830190610db3565b0390a1604051908152a180f35b9091508281813d83116102c0575b61028b8183610ce5565b810103126102bb5751907f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f610206565b600080fd5b503d610281565b6040513d87823e3d90fd5b5080fd5b8380fd5b610c98565b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c5760206040517357891966931eb4bb6fb81430e6ce0a03aabde0638152f35b80fd5b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c5760206040516103208152f35b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c576020604051621e84808152f35b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c57610448610c75565b6024359073ffffffffffffffffffffffffffffffffffffffff82168203610bc15760643573ffffffffffffffffffffffffffffffffffffffff811681036102d65761049161103d565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016908173ffffffffffffffffffffffffffffffffffffffff85161460001461074757813b15610743576040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152868160248183604435978860048401525af18015610738576106ef575b50816105446105cb93602093610e8b565b61054c610d8f565b916040518095819482937feb67241900000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8a166004850152602484015260e060448401528b60e4840152621e84806064840152610320608484015261010060a4840152610104830190610e11565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660c483015203917332400084c286cf3e17e7b677ea9583e60a0003245af19081156102c75785916106b7575b50608060209373ffffffffffffffffffffffffffffffffffffffff7f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f9694817fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b95965b816040519516855216878401526044356040840152166060820152a1604051908152a180f35b90506020939193813d82116106e7575b816106d460209383610ce5565b810103126102bb5751909290608061062e565b3d91506106c7565b67ffffffffffffffff819792971161070b576040529481610533565b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6040513d89823e3d90fd5b8580fd5b90506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201527357891966931eb4bb6fb81430e6ce0a03aabde0636024820152604490602081838173ffffffffffffffffffffffffffffffffffffffff89165afa8015610738578790610b8d575b6107ca9150823590610e8b565b604051907f095ea7b30000000000000000000000000000000000000000000000000000000060208301527357891966931eb4bb6fb81430e6ce0a03aabde06360248301528282015281815267ffffffffffffffff81608081011081608084011117610b60576080820160c08301109060c083011117610b33578060c06108e79201604052602060808201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a082015287808251602084018273ffffffffffffffffffffffffffffffffffffffff8b165af1903d15610b295760803d916108b183610d55565b926108bf6040519485610ce5565b83523d8b602085013e5b019173ffffffffffffffffffffffffffffffffffffffff8816610ec7565b8051908115918215610b02575b505015610a7e5760209060c4604051809481937fe8b99b1b00000000000000000000000000000000000000000000000000000000835273ffffffffffffffffffffffffffffffffffffffff8816600484015273ffffffffffffffffffffffffffffffffffffffff89166024840152803590830152621e84806064830152610320608483015273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660a48301527357891966931eb4bb6fb81430e6ce0a03aabde0635af19081156102c7578591610a41575b50608060209373ffffffffffffffffffffffffffffffffffffffff7f82e577407245f8e8c446b39602dae3fffacbc21172a51c88525e050063929b2f9694817fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9596610691565b90506020939193813d602011610a76575b81610a5f60209383610ce5565b81010312610a72575190929060806109da565b8480fd5b3d9150610a52565b6084907f5361666545524332303a204552433230206f7065726174696f6e20646964206e604051917f08c379a000000000000000000000000000000000000000000000000000000000835260206004840152602a60248401528201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b8192509060209181010312610b2557602001518015158103610b255738806108f4565b8680fd5b60806060916108c9565b6024877f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b6024887f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b506020813d602011610bb9575b81610ba760209383610ce5565b81010312610b25576107ca90516107bd565b3d9150610b9a565b8280fd5b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461032c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261032c576020610c6d610f97565b604051908152f35b6004359073ffffffffffffffffffffffffffffffffffffffff821682036102bb57565b346102bb5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102bb5760206040517332400084c286cf3e17e7b677ea9583e60a0003248152f35b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610d2657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b67ffffffffffffffff8111610d2657601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b6040516020810181811067ffffffffffffffff821117610d26576040526000815290565b919082519283825260005b848110610dfd5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b602081830181015184830182015201610dbe565b90808183519182825260208080809401958560051b01019501936000915b848310610e3f5750505050505090565b9091929394958480610e7b837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086600196030187528a51610db3565b9801930193019194939290610e2f565b91908201809211610e9857565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b91929015610f425750815115610edb575090565b3b15610ee45790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610f555750805190602001fd5b610f93906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610db3565b0390fd5b6040517fb473318e0000000000000000000000000000000000000000000000000000000081523a6004820152621e8480602482015261032060448201526020816064817332400084c286cf3e17e7b677ea9583e60a0003245afa90811561103157600091611003575090565b906020823d8211611029575b8161101c60209383610ce5565b8101031261032c57505190565b3d915061100f565b6040513d6000823e3d90fd5b611045610f97565b9081471061104f57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152fdfea2646970667358221220bff645f26f4ee22fe6f4ac5d9e1de3e44447a5b9b0a1de51b75e9b931343de0664736f6c63430008120033",
  "devdoc": {
    "details": "Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_l1Weth": "WETH address on L1.",
          "_l2RefundAddress": "address that recieves excess gas refunds on L2."
        }
      },
      "getL1CallValue()": {
        "returns": {
          "_0": "amount of ETH that this contract needs to hold in order for relayMessage to succeed."
        }
      },
      "relayMessage(address,bytes)": {
        "params": {
          "message": "Data to send to target.",
          "target": "Contract on L2 that will receive message."
        }
      },
      "relayTokens(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of L1 tokens to deposit and L2 tokens to receive.",
          "l1Token": "L1 token to deposit.",
          "l2Token": "L2 token to receive.",
          "to": "Bridge recipient."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs new Adapter."
      },
      "getL1CallValue()": {
        "notice": "Returns required amount of ETH to send a message."
      },
      "relayMessage(address,bytes)": {
        "notice": "Send cross-chain message to target on ZkSync.This contract must hold at least getL1CallValue() amount of ETH to send a message, or the message will revert."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Bridge tokens to ZkSync.This contract must hold at least getL1CallValue() amount of ETH to send a message or the message will revert."
      }
    },
    "notice": "Contract containing logic to send messages from L1 to ZkSync.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
