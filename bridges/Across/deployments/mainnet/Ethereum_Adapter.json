{
  "address": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xed61888405a97bf200eaecbb3b1592010733ecc38f004129a040233ed2da7a42",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x527E872a5c3f0C7c24Fe33F2593cFB890a285084",
    "transactionIndex": 107,
    "gasUsed": "483872",
    "logsBloom": "0x
    "blockHash": "0xe7123433b1c752f1aa4a63968e419ab90c1ca33f9398df440553ddf0c581e415",
    "transactionHash": "0xed61888405a97bf200eaecbb3b1592010733ecc38f004129a040233ed2da7a42",
    "logs": [],
    "blockNumber": 14704381,
    "cumulativeGasUsed": "11063377",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2433465a1be70a13b6719df6fea2831a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.\",\"kind\":\"dev\",\"methods\":{\"relayMessage(address,bytes)\":{\"params\":{\"message\":\"Data to send to target.\",\"target\":\"Contract that will receive message.\"}},\"relayTokens(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of L1 tokens to send.\",\"l1Token\":\"L1 token to send.\",\"l2Token\":\"Unused parameter in this contract.\",\"to\":\"recipient.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"relayMessage(address,bytes)\":{\"notice\":\"Send message to target on Ethereum.This function, and contract overall, is not useful in practice except that the HubPool expects to interact with the SpokePool via an Adapter, so when communicating to the Ethereum_SpokePool, it must send messages via this pass-through contract.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Send tokens to target.\"}},\"notice\":\"Contract containing logic to send messages from L1 to Ethereum SpokePool.This contract should always be deployed on the same chain as the HubPool, as it acts as a pass-through contract between HubPool and SpokePool on the same chain. Its named \\\"Ethereum_Adapter\\\" because a core assumption is that the HubPool will be deployed on Ethereum, so this adapter will be used to communicate between HubPool and the Ethereum_SpokePool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/Ethereum_Adapter.sol\":\"Ethereum_Adapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/chain-adapters/Ethereum_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/AdapterInterface.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Contract containing logic to send messages from L1 to Ethereum SpokePool.\\r\\n * @notice This contract should always be deployed on the same chain as the HubPool, as it acts as a pass-through\\r\\n * contract between HubPool and SpokePool on the same chain. Its named \\\"Ethereum_Adapter\\\" because a core assumption\\r\\n * is that the HubPool will be deployed on Ethereum, so this adapter will be used to communicate between HubPool\\r\\n * and the Ethereum_SpokePool.\\r\\n * @dev Public functions calling external contracts do not guard against reentrancy because they are expected to be\\r\\n * called via delegatecall, which will execute this contract's logic within the context of the originating contract.\\r\\n * For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods\\r\\n * that call this contract's logic guard against reentrancy.\\r\\n */\\r\\n\\r\\n// solhint-disable-next-line contract-name-camelcase\\r\\ncontract Ethereum_Adapter is AdapterInterface {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /**\\r\\n     * @notice Send message to target on Ethereum.\\r\\n     * @notice This function, and contract overall, is not useful in practice except that the HubPool\\r\\n     * expects to interact with the SpokePool via an Adapter, so when communicating to the Ethereum_SpokePool, it must\\r\\n     * send messages via this pass-through contract.\\r\\n     * @param target Contract that will receive message.\\r\\n     * @param message Data to send to target.\\r\\n     */\\r\\n    function relayMessage(address target, bytes calldata message) external payable override {\\r\\n        _executeCall(target, message);\\r\\n        emit MessageRelayed(target, message);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Send tokens to target.\\r\\n     * @param l1Token L1 token to send.\\r\\n     * @param l2Token Unused parameter in this contract.\\r\\n     * @param amount Amount of L1 tokens to send.\\r\\n     * @param to recipient.\\r\\n     */\\r\\n    function relayTokens(\\r\\n        address l1Token,\\r\\n        address l2Token, // l2Token is unused for ethereum since we are assuming that the HubPool is only deployed\\r\\n        // on this network.\\r\\n        uint256 amount,\\r\\n        address to\\r\\n    ) external payable override {\\r\\n        IERC20(l1Token).safeTransfer(to, amount);\\r\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\r\\n    }\\r\\n\\r\\n    // Note: this snippet of code is copied from Governor.sol. Source: https://github.com/UMAprotocol/protocol/blob/5b37ea818a28479c01e458389a83c3e736306b17/packages/core/contracts/oracle/implementation/Governor.sol#L190-L207\\r\\n    function _executeCall(address to, bytes memory data) private {\\r\\n        // Note: this snippet of code is copied from Governor.sol and modified to not include any \\\"value\\\" field.\\r\\n\\r\\n        bool success;\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n            let inputData := add(data, 0x20)\\r\\n            let inputDataSize := mload(data)\\r\\n            // Hardcode value to be 0 for relayed governance calls in order to avoid addressing complexity of bridging\\r\\n            // value cross-chain.\\r\\n            success := call(gas(), to, 0, inputData, inputDataSize, 0, 0)\\r\\n        }\\r\\n        require(success, \\\"execute call failed\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3342701f53c0a9fb9700a20552e08780e20708e9f69a77948f68d46ce33b0959\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x49ebe1ceb1ac746444ff74eba5e59510c964fce92c89ddbc95ac834a28a89640\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506107d6806100206000396000f3fe6080604052600436106100295760003560e01c806352c8c75c1461002e578063e6eb8ade14610043575b600080fd5b61004161003c3660046105a7565b610056565b005b6100416100513660046105f4565b6100dc565b61007773ffffffffffffffffffffffffffffffffffffffff8516828461015c565b6040805173ffffffffffffffffffffffffffffffffffffffff868116825285811660208301528183018590528316606082015290517fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9181900360800190a150505050565b61011c8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101ee92505050565b7f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac483838360405161014f93929190610677565b60405180910390a1505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526101e9908490610270565b505050565b600060208201825160008082846000895af192505050806101e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f657865637574652063616c6c206661696c65640000000000000000000000000060448201526064015b60405180910390fd5b60006102d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661037c9092919063ffffffff16565b8051909150156101e957808060200190518101906102f091906106e1565b6101e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610267565b606061038b8484600085610395565b90505b9392505050565b606082471015610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610267565b73ffffffffffffffffffffffffffffffffffffffff85163b6104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610267565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516104ce9190610733565b60006040518083038185875af1925050503d806000811461050b576040519150601f19603f3d011682016040523d82523d6000602084013e610510565b606091505b509150915061052082828661052b565b979650505050505050565b6060831561053a57508161038e565b82511561054a5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610267919061074f565b803573ffffffffffffffffffffffffffffffffffffffff811681146105a257600080fd5b919050565b600080600080608085870312156105bd57600080fd5b6105c68561057e565b93506105d46020860161057e565b9250604085013591506105e96060860161057e565b905092959194509250565b60008060006040848603121561060957600080fd5b6106128461057e565b9250602084013567ffffffffffffffff8082111561062f57600080fd5b818601915086601f83011261064357600080fd5b81358181111561065257600080fd5b87602082850101111561066457600080fd5b6020830194508093505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b6000602082840312156106f357600080fd5b8151801515811461038e57600080fd5b60005b8381101561071e578181015183820152602001610706565b8381111561072d576000848401525b50505050565b60008251610745818460208701610703565b9190910192915050565b602081526000825180602084015261076e816040850160208701610703565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212200e5945862d37aa7aba63062b50564dca89a47f3e2e8f804d3dfc6cc495a9a36264736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c806352c8c75c1461002e578063e6eb8ade14610043575b600080fd5b61004161003c3660046105a7565b610056565b005b6100416100513660046105f4565b6100dc565b61007773ffffffffffffffffffffffffffffffffffffffff8516828461015c565b6040805173ffffffffffffffffffffffffffffffffffffffff868116825285811660208301528183018590528316606082015290517fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9181900360800190a150505050565b61011c8383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101ee92505050565b7f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac483838360405161014f93929190610677565b60405180910390a1505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526101e9908490610270565b505050565b600060208201825160008082846000895af192505050806101e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f657865637574652063616c6c206661696c65640000000000000000000000000060448201526064015b60405180910390fd5b60006102d2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661037c9092919063ffffffff16565b8051909150156101e957808060200190518101906102f091906106e1565b6101e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610267565b606061038b8484600085610395565b90505b9392505050565b606082471015610427576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610267565b73ffffffffffffffffffffffffffffffffffffffff85163b6104a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610267565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516104ce9190610733565b60006040518083038185875af1925050503d806000811461050b576040519150601f19603f3d011682016040523d82523d6000602084013e610510565b606091505b509150915061052082828661052b565b979650505050505050565b6060831561053a57508161038e565b82511561054a5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610267919061074f565b803573ffffffffffffffffffffffffffffffffffffffff811681146105a257600080fd5b919050565b600080600080608085870312156105bd57600080fd5b6105c68561057e565b93506105d46020860161057e565b9250604085013591506105e96060860161057e565b905092959194509250565b60008060006040848603121561060957600080fd5b6106128461057e565b9250602084013567ffffffffffffffff8082111561062f57600080fd5b818601915086601f83011261064357600080fd5b81358181111561065257600080fd5b87602082850101111561066457600080fd5b6020830194508093505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b6000602082840312156106f357600080fd5b8151801515811461038e57600080fd5b60005b8381101561071e578181015183820152602001610706565b8381111561072d576000848401525b50505050565b60008251610745818460208701610703565b9190910192915050565b602081526000825180602084015261076e816040850160208701610703565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212200e5945862d37aa7aba63062b50564dca89a47f3e2e8f804d3dfc6cc495a9a36264736f6c634300080d0033",
  "devdoc": {
    "details": "Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.",
    "kind": "dev",
    "methods": {
      "relayMessage(address,bytes)": {
        "params": {
          "message": "Data to send to target.",
          "target": "Contract that will receive message."
        }
      },
      "relayTokens(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of L1 tokens to send.",
          "l1Token": "L1 token to send.",
          "l2Token": "Unused parameter in this contract.",
          "to": "recipient."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "relayMessage(address,bytes)": {
        "notice": "Send message to target on Ethereum.This function, and contract overall, is not useful in practice except that the HubPool expects to interact with the SpokePool via an Adapter, so when communicating to the Ethereum_SpokePool, it must send messages via this pass-through contract."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Send tokens to target."
      }
    },
    "notice": "Contract containing logic to send messages from L1 to Ethereum SpokePool.This contract should always be deployed on the same chain as the HubPool, as it acts as a pass-through contract between HubPool and SpokePool on the same chain. Its named \"Ethereum_Adapter\" because a core assumption is that the HubPool will be deployed on Ethereum, so this adapter will be used to communicate between HubPool and the Ethereum_SpokePool.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
