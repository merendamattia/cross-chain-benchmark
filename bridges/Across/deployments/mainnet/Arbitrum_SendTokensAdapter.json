{
  "address": "0xC06A68DF12376271817FcEBfb45Be996B0e1593E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ArbitrumL1ERC20GatewayLike",
          "name": "_l1ERC20GatewayRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RELAY_TOKENS_L2_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL1CallValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1ERC20GatewayRouter",
      "outputs": [
        {
          "internalType": "contract ArbitrumL1ERC20GatewayLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2GasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2MaxSubmissionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2RefundL2Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c02bb315233ad0b88a036afc38c5a3949385e197e1c6139148c3156d745b249",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0xC06A68DF12376271817FcEBfb45Be996B0e1593E",
    "transactionIndex": 56,
    "gasUsed": "690700",
    "logsBloom": "0x
    "blockHash": "0xa0e595af1a8761d13c39918a4a4bd11a084d26d609bd38ca1a2d7d61502518e9",
    "transactionHash": "0x7c02bb315233ad0b88a036afc38c5a3949385e197e1c6139148c3156d745b249",
    "logs": [],
    "blockNumber": 16691987,
    "cumulativeGasUsed": "6537054",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef"],
  "numDeployments": 1,
  "solcInputHash": "778ed9956c3f76e793496228f16e1373",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ArbitrumL1ERC20GatewayLike\",\"name\":\"_l1ERC20GatewayRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RELAY_TOKENS_L2_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1CallValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ERC20GatewayRouter\",\"outputs\":[{\"internalType\":\"contract ArbitrumL1ERC20GatewayLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2GasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2MaxSubmissionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2RefundL2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_l1ERC20GatewayRouter\":\"ERC20 gateway router contract to send tokens to Arbitrum.\"}},\"getL1CallValue()\":{\"returns\":{\"_0\":\"amount of ETH that this contract needs to hold in order for relayMessage to succeed.\"}},\"relayMessage(address,bytes)\":{\"details\":\"This performs similar logic to relayTokens in the normal Arbitrum_Adapter by sending tokens the Arbitrum_SpokePool out of the HubPool.\",\"params\":{\"message\":\"The encoded address of the ERC20 to send to the rescue address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs new Adapter.\"},\"getL1CallValue()\":{\"notice\":\"Returns required amount of ETH to send a message via the Inbox.\"},\"relayMessage(address,bytes)\":{\"notice\":\"Send tokens to SpokePool. Enables HubPool admin to call relaySpokePoolAdminFunction that will trigger this function.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Should never be called.\"}},\"notice\":\"This adapter is built for emergencies to send funds from the Hub to a Spoke in the event that a spoke pool received a duplicate root bundle relay, due to some replay issue.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/Arbitrum_SendTokensAdapter.sol\":\"Arbitrum_SendTokensAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/chain-adapters/Arbitrum_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/AdapterInterface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface ArbitrumL1InboxLike {\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function unsafeCreateRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n}\\n\\ninterface ArbitrumL1ERC20GatewayLike {\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function outboundTransferCustomRefund(\\n        address _token,\\n        address _refundTo,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    function getGateway(address _token) external view returns (address);\\n}\\n\\n/**\\n * @notice Contract containing logic to send messages from L1 to Arbitrum.\\n * @dev Public functions calling external contracts do not guard against reentrancy because they are expected to be\\n * called via delegatecall, which will execute this contract's logic within the context of the originating contract.\\n * For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods\\n * that call this contract's logic guard against reentrancy.\\n */\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract Arbitrum_Adapter is AdapterInterface {\\n    using SafeERC20 for IERC20;\\n\\n    // Amount of ETH allocated to pay for the base submission fee. The base submission fee is a parameter unique to\\n    // retryable transactions; the user is charged the base submission fee to cover the storage costs of keeping their\\n    // ticket\\u2019s calldata in the retry buffer. (current base submission fee is queryable via\\n    // ArbRetryableTx.getSubmissionPrice). ArbRetryableTicket precompile interface exists at L2 address\\n    // 0x000000000000000000000000000000000000006E.\\n    uint256 public constant l2MaxSubmissionCost = 0.01e18;\\n\\n    // L2 Gas price bid for immediate L2 execution attempt (queryable via standard eth*gasPrice RPC)\\n    uint256 public constant l2GasPrice = 5e9; // 5 gWei\\n\\n    uint32 public constant RELAY_TOKENS_L2_GAS_LIMIT = 300_000;\\n    uint32 public constant RELAY_MESSAGE_L2_GAS_LIMIT = 2_000_000;\\n\\n    // This address on L2 receives extra ETH that is left over after relaying a message via the inbox.\\n    address public constant l2RefundL2Address = 0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010;\\n\\n    ArbitrumL1InboxLike public immutable l1Inbox;\\n\\n    ArbitrumL1ERC20GatewayLike public immutable l1ERC20GatewayRouter;\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _l1ArbitrumInbox Inbox helper contract to send messages to Arbitrum.\\n     * @param _l1ERC20GatewayRouter ERC20 gateway router contract to send tokens to Arbitrum.\\n     */\\n    constructor(ArbitrumL1InboxLike _l1ArbitrumInbox, ArbitrumL1ERC20GatewayLike _l1ERC20GatewayRouter) {\\n        l1Inbox = _l1ArbitrumInbox;\\n        l1ERC20GatewayRouter = _l1ERC20GatewayRouter;\\n    }\\n\\n    /**\\n     * @notice Send cross-chain message to target on Arbitrum.\\n     * @notice This contract must hold at least getL1CallValue() amount of ETH to send a message via the Inbox\\n     * successfully, or the message will get stuck.\\n     * @param target Contract on Arbitrum that will receive message.\\n     * @param message Data to send to target.\\n     */\\n    function relayMessage(address target, bytes memory message) external payable override {\\n        uint256 requiredL1CallValue = _contractHasSufficientEthBalance(RELAY_MESSAGE_L2_GAS_LIMIT);\\n\\n        l1Inbox.createRetryableTicket{ value: requiredL1CallValue }(\\n            target, // destAddr destination L2 contract address\\n            0, // l2CallValue call value for retryable L2 message\\n            l2MaxSubmissionCost, // maxSubmissionCost Max gas deducted from user's L2 balance to cover base fee\\n            l2RefundL2Address, // excessFeeRefundAddress maxgas * gasprice - execution cost gets credited here on L2\\n            l2RefundL2Address, // callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n            RELAY_MESSAGE_L2_GAS_LIMIT, // maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n            l2GasPrice, // gasPriceBid price bid for L2 execution\\n            message // data ABI encoded data of L2 message\\n        );\\n\\n        emit MessageRelayed(target, message);\\n    }\\n\\n    /**\\n     * @notice Bridge tokens to Arbitrum.\\n     * @notice This contract must hold at least getL1CallValue() amount of ETH to send a message via the Inbox\\n     * successfully, or the message will get stuck.\\n     * @param l1Token L1 token to deposit.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of L1 tokens to deposit and L2 tokens to receive.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token, // l2Token is unused for Arbitrum.\\n        uint256 amount,\\n        address to\\n    ) external payable override {\\n        uint256 requiredL1CallValue = _contractHasSufficientEthBalance(RELAY_TOKENS_L2_GAS_LIMIT);\\n\\n        // Approve the gateway, not the router, to spend the hub pool's balance. The gateway, which is different\\n        // per L1 token, will temporarily escrow the tokens to be bridged and pull them from this contract.\\n        address erc20Gateway = l1ERC20GatewayRouter.getGateway(l1Token);\\n        IERC20(l1Token).safeIncreaseAllowance(erc20Gateway, amount);\\n\\n        // `outboundTransfer` expects that the caller includes a bytes message as the last param that includes the\\n        // maxSubmissionCost to use when creating an L2 retryable ticket: https://github.com/OffchainLabs/arbitrum/blob/e98d14873dd77513b569771f47b5e05b72402c5e/packages/arb-bridge-peripherals/contracts/tokenbridge/ethereum/gateway/L1GatewayRouter.sol#L232\\n        bytes memory data = abi.encode(l2MaxSubmissionCost, \\\"\\\");\\n\\n        // Note: Legacy routers don't have the outboundTransferCustomRefund method, so default to using\\n        // outboundTransfer(). Legacy routers are used for the following tokens that are currently enabled:\\n        // - DAI: the implementation of `outboundTransfer` at the current DAI custom gateway\\n        //        (https://etherscan.io/address/0xD3B5b60020504bc3489D6949d545893982BA3011#writeContract) sets the\\n        //        sender as the refund address so the aliased HubPool should receive excess funds. Implementation here:\\n        //        https://github.com/makerdao/arbitrum-dai-bridge/blob/11a80385e2622968069c34d401b3d54a59060e87/contracts/l1/L1DaiGateway.sol#L109\\n        if (l1Token == 0x6B175474E89094C44Da98b954EedeAC495271d0F) {\\n            // This means that the excess ETH to pay for the L2 transaction will be sent to the aliased\\n            // contract address on L2, which we'd have to retrieve via a custom adapter, the Arbitrum_RescueAdapter.\\n            // To do so, in a single transaction: 1) setCrossChainContracts to Arbitrum_RescueAdapter, 2) relayMessage\\n            // with function data = abi.encode(amountToRescue), 3) setCrossChainContracts back to this adapter.\\n            l1ERC20GatewayRouter.outboundTransfer{ value: requiredL1CallValue }(\\n                l1Token,\\n                to,\\n                amount,\\n                RELAY_TOKENS_L2_GAS_LIMIT,\\n                l2GasPrice,\\n                data\\n            );\\n        } else {\\n            l1ERC20GatewayRouter.outboundTransferCustomRefund{ value: requiredL1CallValue }(\\n                l1Token,\\n                l2RefundL2Address,\\n                to,\\n                amount,\\n                RELAY_TOKENS_L2_GAS_LIMIT,\\n                l2GasPrice,\\n                data\\n            );\\n        }\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n    }\\n\\n    /**\\n     * @notice Returns required amount of ETH to send a message via the Inbox.\\n     * @return amount of ETH that this contract needs to hold in order for relayMessage to succeed.\\n     */\\n    function getL1CallValue(uint32 l2GasLimit) public pure returns (uint256) {\\n        return l2MaxSubmissionCost + l2GasPrice * l2GasLimit;\\n    }\\n\\n    function _contractHasSufficientEthBalance(uint32 l2GasLimit) internal view returns (uint256 requiredL1CallValue) {\\n        requiredL1CallValue = getL1CallValue(l2GasLimit);\\n        require(address(this).balance >= requiredL1CallValue, \\\"Insufficient ETH balance\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf01d3a899cdeec331b26bbe416cb22f500142002d3ad4c182e01cd44c17d5d11\",\"license\":\"AGPL-3.0-only\"},\"contracts/chain-adapters/Arbitrum_SendTokensAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/AdapterInterface.sol\\\";\\nimport { ArbitrumL1ERC20GatewayLike } from \\\"./Arbitrum_Adapter.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @notice This adapter is built for emergencies to send funds from the Hub to a Spoke in the event that a spoke pool\\n * received a duplicate root bundle relay, due to some replay issue.\\n */\\n// solhint-disable-next-line contract-name-camelcase\\ncontract Arbitrum_SendTokensAdapter is AdapterInterface {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public immutable l2MaxSubmissionCost = 0.01e18;\\n    uint256 public immutable l2GasPrice = 5e9;\\n    uint32 public constant RELAY_TOKENS_L2_GAS_LIMIT = 300_000;\\n\\n    ArbitrumL1ERC20GatewayLike public immutable l1ERC20GatewayRouter;\\n\\n    address public constant l2RefundL2Address = 0x428AB2BA90Eba0a4Be7aF34C9Ac451ab061AC010;\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _l1ERC20GatewayRouter ERC20 gateway router contract to send tokens to Arbitrum.\\n     */\\n    constructor(ArbitrumL1ERC20GatewayLike _l1ERC20GatewayRouter) {\\n        l1ERC20GatewayRouter = _l1ERC20GatewayRouter;\\n    }\\n\\n    /**\\n     * @notice Send tokens to SpokePool. Enables HubPool admin to call relaySpokePoolAdminFunction that will trigger\\n     * this function.\\n     * @dev This performs similar logic to relayTokens in the normal Arbitrum_Adapter by sending tokens\\n     * the Arbitrum_SpokePool out of the HubPool.\\n     * @param message The encoded address of the ERC20 to send to the rescue address.\\n     */\\n    function relayMessage(address target, bytes memory message) external payable override {\\n        (address l1Token, uint256 amount) = abi.decode(message, (address, uint256));\\n\\n        uint256 requiredL1CallValue = _contractHasSufficientEthBalance();\\n\\n        // Approve the gateway, not the router, to spend the hub pool's balance. The gateway, which is different\\n        // per L1 token, will temporarily escrow the tokens to be bridged and pull them from this contract.\\n        address erc20Gateway = l1ERC20GatewayRouter.getGateway(l1Token);\\n        IERC20(l1Token).safeIncreaseAllowance(erc20Gateway, amount);\\n\\n        // `outboundTransfer` expects that the caller includes a bytes message as the last param that includes the\\n        // maxSubmissionCost to use when creating an L2 retryable ticket: https://github.com/OffchainLabs/arbitrum/blob/e98d14873dd77513b569771f47b5e05b72402c5e/packages/arb-bridge-peripherals/contracts/tokenbridge/ethereum/gateway/L1GatewayRouter.sol#L232\\n        bytes memory data = abi.encode(l2MaxSubmissionCost, \\\"\\\");\\n\\n        l1ERC20GatewayRouter.outboundTransferCustomRefund{ value: requiredL1CallValue }(\\n            l1Token,\\n            l2RefundL2Address,\\n            target,\\n            amount,\\n            RELAY_TOKENS_L2_GAS_LIMIT,\\n            l2GasPrice,\\n            data\\n        );\\n\\n        // Purposefully not emitting any events so as not to confuse off-chain monitors that track this event.\\n        // emit TokensRelayed(l1Token, l2Token, amount, to);\\n    }\\n\\n    /**\\n     * @notice Should never be called.\\n     */\\n    function relayTokens(\\n        address,\\n        address,\\n        uint256,\\n        address\\n    ) external payable override {\\n        revert(\\\"relayTokens disabled\\\");\\n    }\\n\\n    /**\\n     * @notice Returns required amount of ETH to send a message via the Inbox.\\n     * @return amount of ETH that this contract needs to hold in order for relayMessage to succeed.\\n     */\\n    function getL1CallValue() public pure returns (uint256) {\\n        return l2MaxSubmissionCost + l2GasPrice * RELAY_TOKENS_L2_GAS_LIMIT;\\n    }\\n\\n    function _contractHasSufficientEthBalance() internal view returns (uint256 requiredL1CallValue) {\\n        requiredL1CallValue = getL1CallValue();\\n        require(address(this).balance >= requiredL1CallValue, \\\"Insufficient ETH balance\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x45bafc3f5136bc882620977850a7c4a1d0ee65d69fb65eb165496714e91f536f\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x49ebe1ceb1ac746444ff74eba5e59510c964fce92c89ddbc95ac834a28a89640\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e0346100b357601f610c6738819003918201601f19168301916001600160401b038311848410176100b8578084926020946040528339810103126100b357516001600160a01b03811681036100b357662386f26fc1000060805264012a05f20060a05260c052604051610b9890816100cf82396080518181816102f9015281816106a00152610b3b015260a05181818161037a015281816107440152610b06015260c05181818161015001526108ad0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600090813560e01c806308f1ed15146108d15780631ba4a9cb1461086357806328f2716e1461082857806352c8c75c146107675780639ae366851461070f5780639c3ba200146106c3578063e599477e1461066b5763e6eb8ade1461007957600080fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610667576100aa610912565b9260249081359167ffffffffffffffff9182841161043057366023850112156104305783810135936100db856109c6565b906100e887519283610985565b858252602095868301913686838301011161066357818a92878a9301853784010152868280518101031261065f57519173ffffffffffffffffffffffffffffffffffffffff9182841680940361065b57870151610143610b00565b92834710610600578086917f0000000000000000000000000000000000000000000000000000000000000000169b898d8c51948580927fbda009fe0000000000000000000000000000000000000000000000000000000082528b8a8301525afa9283156105f6578c936105ba575b50818b51937fdd62ed3e00000000000000000000000000000000000000000000000000000000855230878601521680898501526044938b8186818c5afa80156105ae5786908f90610579575b6102079250610a66565b908c51918c8301917f095ea7b30000000000000000000000000000000000000000000000000000000083528b840152858301528482526102468261093a565b8c51918d83018381108d82111761054d578e528c83527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648d840152893b156104f2578e8e818f938d6102c4979683809351925af1913d156104e6573d6102b76102ae826109c6565b93519384610985565b825281933d92013e610aa2565b80518061043e575b50508b9c95938b9c989795936103af938c938e73428ab2ba90eba0a4be7af34c9ac451ab061ac0109f51957f00000000000000000000000000000000000000000000000000000000000000009087015280808701528c6060870152606086526103348661093a565b519e8f9b8c9a8b997f4fb1a07b000000000000000000000000000000000000000000000000000000008b528a015288015216908501526064840152620493e060848401527f000000000000000000000000000000000000000000000000000000000000000060a484015260e060c484015260e4830190610a23565b03925af18015610434576103c1578480f35b3d8086853e6103d08185610985565b830192828185031261043057805191821161043057019082601f8301121561042c5781519261040a610401856109c6565b95519586610985565b83855281848401011161042c578061042494019101610a00565b388080808480f35b8480fd5b8580fd5b84513d87823e3d90fd5b818c91810103126104e2578a01518015908115036104e2576104615738806102cc565b6084857f5361666545524332303a204552433230206f7065726174696f6e20646964206e85602a8f8f8e9151957f08c379a00000000000000000000000000000000000000000000000000000000087528601528401528201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b8c80fd5b50509050606090610aa2565b8d517f08c379a00000000000000000000000000000000000000000000000000000000081528089018e9052601d818d01527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081880152606490fd5b508a8f60418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50508b81813d83116105a7575b6105908183610985565b810103126105a3578561020791516101fd565b8d80fd5b503d610586565b8e8e51903d90823e3d90fd5b9092508981813d83116105ef575b6105d28183610985565b810103126105eb575181811681036105eb5791386101b1565b8b80fd5b503d6105c8565b8b513d8e823e3d90fd5b6064836018888b8d51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152fd5b8880fd5b8780fd5b8980fd5b5080fd5b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261066757602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610667576020905173428ab2ba90eba0a4be7af34c9ac451ab061ac0108152f35b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261066757602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50919060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108255761079c610912565b5073ffffffffffffffffffffffffffffffffffffffff6024358181160361066757606435908116036108255750602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601460248201527f72656c6179546f6b656e732064697361626c65640000000000000000000000006044820152fd5b80fd5b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106675760209051620493e08152f35b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610667576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106675760209061090b610b00565b9051908152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361093557565b600080fd5b6080810190811067ffffffffffffffff82111761095657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761095657604052565b67ffffffffffffffff811161095657601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110610a135750506000910152565b8181015183820152602001610a03565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610a5f81518092818752878088019101610a00565b0116010190565b91908201809211610a7357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90919015610aae575090565b815115610abe5750805190602001fd5b610afc906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610a23565b0390fd5b620493e07f0000000000000000000000000000000000000000000000000000000000000000818102918115918304141715610a7357610b5f907f0000000000000000000000000000000000000000000000000000000000000000610a66565b9056fea26469706673582212204720938d7cb043f3ec85ed4a591ecd87e9eda6b87236ec70d1fbafbb1b476c2f64736f6c63430008120033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600090813560e01c806308f1ed15146108d15780631ba4a9cb1461086357806328f2716e1461082857806352c8c75c146107675780639ae366851461070f5780639c3ba200146106c3578063e599477e1461066b5763e6eb8ade1461007957600080fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610667576100aa610912565b9260249081359167ffffffffffffffff9182841161043057366023850112156104305783810135936100db856109c6565b906100e887519283610985565b858252602095868301913686838301011161066357818a92878a9301853784010152868280518101031261065f57519173ffffffffffffffffffffffffffffffffffffffff9182841680940361065b57870151610143610b00565b92834710610600578086917f0000000000000000000000000000000000000000000000000000000000000000169b898d8c51948580927fbda009fe0000000000000000000000000000000000000000000000000000000082528b8a8301525afa9283156105f6578c936105ba575b50818b51937fdd62ed3e00000000000000000000000000000000000000000000000000000000855230878601521680898501526044938b8186818c5afa80156105ae5786908f90610579575b6102079250610a66565b908c51918c8301917f095ea7b30000000000000000000000000000000000000000000000000000000083528b840152858301528482526102468261093a565b8c51918d83018381108d82111761054d578e528c83527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648d840152893b156104f2578e8e818f938d6102c4979683809351925af1913d156104e6573d6102b76102ae826109c6565b93519384610985565b825281933d92013e610aa2565b80518061043e575b50508b9c95938b9c989795936103af938c938e73428ab2ba90eba0a4be7af34c9ac451ab061ac0109f51957f00000000000000000000000000000000000000000000000000000000000000009087015280808701528c6060870152606086526103348661093a565b519e8f9b8c9a8b997f4fb1a07b000000000000000000000000000000000000000000000000000000008b528a015288015216908501526064840152620493e060848401527f000000000000000000000000000000000000000000000000000000000000000060a484015260e060c484015260e4830190610a23565b03925af18015610434576103c1578480f35b3d8086853e6103d08185610985565b830192828185031261043057805191821161043057019082601f8301121561042c5781519261040a610401856109c6565b95519586610985565b83855281848401011161042c578061042494019101610a00565b388080808480f35b8480fd5b8580fd5b84513d87823e3d90fd5b818c91810103126104e2578a01518015908115036104e2576104615738806102cc565b6084857f5361666545524332303a204552433230206f7065726174696f6e20646964206e85602a8f8f8e9151957f08c379a00000000000000000000000000000000000000000000000000000000087528601528401528201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b8c80fd5b50509050606090610aa2565b8d517f08c379a00000000000000000000000000000000000000000000000000000000081528089018e9052601d818d01527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081880152606490fd5b508a8f60418a7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50508b81813d83116105a7575b6105908183610985565b810103126105a3578561020791516101fd565b8d80fd5b503d610586565b8e8e51903d90823e3d90fd5b9092508981813d83116105ef575b6105d28183610985565b810103126105eb575181811681036105eb5791386101b1565b8b80fd5b503d6105c8565b8b513d8e823e3d90fd5b6064836018888b8d51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152fd5b8880fd5b8780fd5b8980fd5b5080fd5b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261066757602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610667576020905173428ab2ba90eba0a4be7af34c9ac451ab061ac0108152f35b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261066757602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b50919060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126108255761079c610912565b5073ffffffffffffffffffffffffffffffffffffffff6024358181160361066757606435908116036108255750602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601460248201527f72656c6179546f6b656e732064697361626c65640000000000000000000000006044820152fd5b80fd5b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106675760209051620493e08152f35b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610667576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b503461066757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106675760209061090b610b00565b9051908152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361093557565b600080fd5b6080810190811067ffffffffffffffff82111761095657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761095657604052565b67ffffffffffffffff811161095657601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60005b838110610a135750506000910152565b8181015183820152602001610a03565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610a5f81518092818752878088019101610a00565b0116010190565b91908201809211610a7357565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90919015610aae575090565b815115610abe5750805190602001fd5b610afc906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610a23565b0390fd5b620493e07f0000000000000000000000000000000000000000000000000000000000000000818102918115918304141715610a7357610b5f907f0000000000000000000000000000000000000000000000000000000000000000610a66565b9056fea26469706673582212204720938d7cb043f3ec85ed4a591ecd87e9eda6b87236ec70d1fbafbb1b476c2f64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_l1ERC20GatewayRouter": "ERC20 gateway router contract to send tokens to Arbitrum."
        }
      },
      "getL1CallValue()": {
        "returns": {
          "_0": "amount of ETH that this contract needs to hold in order for relayMessage to succeed."
        }
      },
      "relayMessage(address,bytes)": {
        "details": "This performs similar logic to relayTokens in the normal Arbitrum_Adapter by sending tokens the Arbitrum_SpokePool out of the HubPool.",
        "params": {
          "message": "The encoded address of the ERC20 to send to the rescue address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs new Adapter."
      },
      "getL1CallValue()": {
        "notice": "Returns required amount of ETH to send a message via the Inbox."
      },
      "relayMessage(address,bytes)": {
        "notice": "Send tokens to SpokePool. Enables HubPool admin to call relaySpokePoolAdminFunction that will trigger this function."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Should never be called."
      }
    },
    "notice": "This adapter is built for emergencies to send funds from the Hub to a Spoke in the event that a spoke pool received a duplicate root bundle relay, due to some replay issue.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
