{
  "address": "0x98Dd57048d7d5337e92D9102743528ea4Fea64aB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hubPool",
          "type": "address"
        },
        {
          "internalType": "contract USDYieldManager",
          "name": "_usdYieldManager",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_dai",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hubPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hintId",
          "type": "uint256"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdYieldManager",
      "outputs": [
        {
          "internalType": "contract USDYieldManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3378fc2abc57581243ba7fd92f495449567b1f1acc1c758c8f167ac0a71823d1",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x98Dd57048d7d5337e92D9102743528ea4Fea64aB",
    "transactionIndex": 205,
    "gasUsed": "615149",
    "logsBloom": "0x
    "blockHash": "0xd4d9fed439c49a6092a28a13c320fc7a9d54b7fa0f307dae5bebf5eef7e4b3f8",
    "transactionHash": "0x3378fc2abc57581243ba7fd92f495449567b1f1acc1c758c8f167ac0a71823d1",
    "logs": [],
    "blockNumber": 20378862,
    "cumulativeGasUsed": "16598852",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc186fA914353c44b2E33eBE05f21846F1048bEda",
    "0xa230285d5683C74935aD14c446e137c8c8828438",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F"
  ],
  "numDeployments": 1,
  "solcInputHash": "920e48615e6861bea91066905c231277",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hubPool\",\"type\":\"address\"},{\"internalType\":\"contract USDYieldManager\",\"name\":\"_usdYieldManager\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_dai\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hubPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hintId\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdYieldManager\",\"outputs\":[{\"internalType\":\"contract USDYieldManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Blast USDB withdrawals are a two step process where the L2 to L1 withdrawal must first be finalized via the typical OP Stack mechanism, and then a claim from the withdrawal's *recipient* must be made against a USDBYieldManager contract. This means that the Blast_SpokePool must set its recipient to this contract's address and then an EOA can call this contract to retrieve the DAI.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_dai\":\"DAI token to be retrieved.\",\"_hubPool\":\"Where to send DAI to.\",\"_usdYieldManager\":\"USDCYieldManager contract on Ethereum.\"}},\"retrieve(uint256,uint256)\":{\"params\":{\"_hintId\":\"Checkpoint hint ID. Can be found by querying USDYieldManager.findCheckpointHint.\",\"_requestId\":\"L2 withdrawal request ID. Emitted in L1 WithdrawalRequested event when the L2 to L1 withdrawal is first \\\"finalized\\\" but still awaiting the recipient to claim the DAI.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs USDB Retriever\"},\"retrieve(uint256,uint256)\":{\"notice\":\"Calls USDCYieldManager contract to release DAI and send to the hubPool. Required to use this function to retrieve DAI since only the L2 withdrawal recipient can make this call.This can revert if the claim is not ready yet. It takes ~12 hours for a Blast admin to make the DAI available for retrieval following withdrawal finalization.\"}},\"notice\":\"Contract deployed on Ethereum to facilitate DAI transfers from Blast to the HubPool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Blast_DaiRetriever.sol\":\"Blast_DaiRetriever\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@uma/core/contracts/common/implementation/MultiCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n// This contract is taken from Uniswap's multi call implementation (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol)\\n// and was modified to be solidity 0.8 compatible. Additionally, the method was restricted to only work with msg.value\\n// set to 0 to avoid any nasty attack vectors on function calls that use value sent with deposits.\\n\\n/// @title MultiCaller\\n/// @notice Enables calling multiple methods in a single call to the contract\\ncontract MultiCaller {\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9f6afe5bafc5e16fe8d63010a740ec3a88a9f00a7236ea7e5b039a2f50eb346e\",\"license\":\"AGPL-3.0-only\"},\"contracts/Blast_DaiRetriever.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Lockable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@uma/core/contracts/common/implementation/MultiCaller.sol\\\";\\n\\ninterface USDYieldManager {\\n    function claimWithdrawal(uint256 _requestId, uint256 _hintId) external returns (bool success);\\n}\\n\\n/**\\n * @notice Contract deployed on Ethereum to facilitate DAI transfers from Blast to the HubPool.\\n * @dev Blast USDB withdrawals are a two step process where the L2 to L1 withdrawal must first be finalized via\\n * the typical OP Stack mechanism, and then a claim from the withdrawal's *recipient* must be made against a\\n * USDBYieldManager contract. This means that the Blast_SpokePool must set its recipient to this contract's address\\n * and then an EOA can call this contract to retrieve the DAI.\\n */\\ncontract Blast_DaiRetriever is Lockable, MultiCaller {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // Should be set to HubPool on Ethereum\\n    address public immutable hubPool;\\n\\n    // USDCYieldManager contract on Ethereum which releases DAI to the hubPool.\\n    USDYieldManager public immutable usdYieldManager;\\n\\n    // Token to be retrieved.\\n    IERC20Upgradeable public immutable dai;\\n\\n    /**\\n     * @notice Constructs USDB Retriever\\n     * @param _hubPool Where to send DAI to.\\n     * @param _usdYieldManager USDCYieldManager contract on Ethereum.\\n     * @param _dai DAI token to be retrieved.\\n     */\\n    constructor(\\n        address _hubPool,\\n        USDYieldManager _usdYieldManager,\\n        IERC20Upgradeable _dai\\n    ) {\\n        //slither-disable-next-line missing-zero-check\\n        hubPool = _hubPool;\\n        usdYieldManager = _usdYieldManager;\\n        dai = _dai;\\n    }\\n\\n    /**\\n     * @notice Calls USDCYieldManager contract to release DAI and send to the hubPool. Required to use this function\\n     * to retrieve DAI since only the L2 withdrawal recipient can make this call.\\n     * @notice This can revert if the claim is not ready yet. It takes ~12 hours for a Blast admin to make the DAI\\n     * available for retrieval following withdrawal finalization.\\n     * @param _requestId L2 withdrawal request ID. Emitted in L1 WithdrawalRequested event when the L2 to L1\\n     * withdrawal is first \\\"finalized\\\" but still awaiting the recipient to claim the DAI.\\n     * @param _hintId Checkpoint hint ID. Can be found by querying USDYieldManager.findCheckpointHint.\\n     */\\n    function retrieve(uint256 _requestId, uint256 _hintId) public nonReentrant {\\n        require(usdYieldManager.claimWithdrawal(_requestId, _hintId), \\\"claim failed\\\");\\n        dai.safeTransfer(hubPool, dai.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xd31d351ec64cd79b45361ec4c00fb034ee2fc5e67da5e3a1607495a1a7244d85\",\"license\":\"BUSL-1.1\"},\"contracts/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n * @dev The reason why we use this local contract instead of importing from uma/contracts is because of the addition\\n * of the internal method `functionCallStackOriginatesFromOutsideThisContract` which doesn't exist in the one exported\\n * by uma/contracts.\\n * @custom:security-contact bugs@across.to\\n */\\ncontract Lockable {\\n    bool internal _notEntered;\\n\\n    constructor() {\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\n        // refund coming into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a nonReentrant function from another nonReentrant function is not supported. It is possible to\\n     * prevent this from happening by making the nonReentrant function external, and making it call a private\\n     * function that does the actual state modification.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a nonReentrant() state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is currently in a non-entered state, meaning that the origination of the call\\n     * came from outside the contract. This is relevant with fallback/receive methods to see if the call came from ETH\\n     * being dropped onto the contract externally or due to ETH dropped on the contract from within a method in this\\n     * contract, such as unwrapping WETH to ETH within the contract.\\n     */\\n    function functionCallStackOriginatesFromOutsideThisContract() internal view returns (bool) {\\n        return _notEntered;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every nonReentrant() method.\\n    // On entry into a function, _preEntranceCheck() should always be called to check if the function is being\\n    // re-entered. Then, if the function modifies state, it should call _postEntranceSet(), perform its logic, and\\n    // then call _postEntranceReset().\\n    // View-only methods can simply call _preEntranceCheck() to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0x8f1a93e030b8a610f941935fa5d7433530c3a0a047d617a839996d23889e9666\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e0346100c257601f610a9838819003918201601f19168301916001600160401b038311848410176100c6578084926060946040528339810103126100c25780516001600160a01b03919082811681036100c25760208201519183831683036100c2576040015192831683036100c257600160ff195f5416175f5560805260a05260c0526040516109bd90816100db82396080518181816101c60152610495015260a05181818161011a01526102c5015260c05181818161018301526105030152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c806326a2ebc9146102805780637c2522081461005f578063ac9650d81461005a578063e1904402146100555763f4b9fa7514610050575f80fd5b6104b9565b61044b565b6103c3565b3461027c5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c5760ff5f54161561027c576100c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f55565b6040517ff21340e40000000000000000000000000000000000000000000000000000000081526004803590820152602480359082015260209073ffffffffffffffffffffffffffffffffffffffff9082816044815f7f000000000000000000000000000000000000000000000000000000000000000087165af1801561024a57610154915f9161024f575b506105d9565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152907f00000000000000000000000000000000000000000000000000000000000000009083908390602490829085165afa91821561024a576101eb935f9361021b575b50507f00000000000000000000000000000000000000000000000000000000000000009061086c565b61021960017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f5416175f55565b005b61023b929350803d10610243575b6102338183610575565b8101906105e0565b9083806101c2565b503d610229565b6105ce565b61026f9150843d8611610275575b6102678183610575565b8101906105b6565b8461014e565b503d61025d565b5f80fd5b3461027c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c5773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660805260206080f35b5f5b8381106102ff5750505f910152565b81810151838201526020016102f0565b602080820190808352835180925260408301928160408460051b8301019501935f915b8483106103425750505050505090565b909192939495848080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8c516103af815180928187528780880191016102ee565b011601019801930193019194939290610332565b3461027c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c5767ffffffffffffffff60043581811161027c573660238201121561027c57806004013591821161027c573660248360051b8301011161027c5761044791602461043b9201610785565b6040519182918261030f565b0390f35b3461027c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761057057604052565b610527565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761057057604052565b9081602091031261027c5751801515810361027c5790565b6040513d5f823e3d90fd5b1561027c57565b9081602091031261027c575190565b67ffffffffffffffff81116105705760051b60200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b91908110156106945760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561027c57019081359167ffffffffffffffff831161027c57602001823603811361027c579190565b610607565b908092918237015f815290565b67ffffffffffffffff811161057057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b3d1561070a573d906106f1826106a6565b916106ff6040519384610575565b82523d5f602084013e565b606090565b60208183031261027c5780519067ffffffffffffffff821161027c570181601f8201121561027c578051610742816106a6565b926107506040519485610575565b8184526020828401011161027c5761076e91602080850191016102ee565b90565b80518210156106945760209160051b010190565b919091610791836105ef565b9060406107a16040519384610575565b8483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107ce866105ef565b015f5b81811061085b57505082945f5b8181106107ec575050505050565b5f806107f9838588610634565b90610808875180938193610699565b0390305af46108156106e0565b901561083b57906001916108298288610771565b526108348187610771565b50016107de565b604481511061027c5780600461027c92015160248091830101910161070f565b8060606020809388010152016107d1565b9190916040519260208401927fa9059cbb00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8092166024860152604485015260448452608084019284841067ffffffffffffffff8511176105705761092e9460205f949385948760405216956108f381610554565b527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af16109286106e0565b9161095e565b8051908115918215610944575b50501561027c57565b61095792506020809183010191016105b6565b5f8061093b565b90156109785781511561096f575090565b3b1561027c5790565b50805190811561027c57602001fdfea26469706673582212208602369c5245ef7920a55937d6b0e6d681493b1f712ed2cd18012ffe2a7182b364736f6c63430008170033",
  "deployedBytecode": "0x60806040526004361015610011575f80fd5b5f3560e01c806326a2ebc9146102805780637c2522081461005f578063ac9650d81461005a578063e1904402146100555763f4b9fa7514610050575f80fd5b6104b9565b61044b565b6103c3565b3461027c5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c5760ff5f54161561027c576100c37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f54165f55565b6040517ff21340e40000000000000000000000000000000000000000000000000000000081526004803590820152602480359082015260209073ffffffffffffffffffffffffffffffffffffffff9082816044815f7f000000000000000000000000000000000000000000000000000000000000000087165af1801561024a57610154915f9161024f575b506105d9565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152907f00000000000000000000000000000000000000000000000000000000000000009083908390602490829085165afa91821561024a576101eb935f9361021b575b50507f00000000000000000000000000000000000000000000000000000000000000009061086c565b61021960017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff005f5416175f55565b005b61023b929350803d10610243575b6102338183610575565b8101906105e0565b9083806101c2565b503d610229565b6105ce565b61026f9150843d8611610275575b6102678183610575565b8101906105b6565b8461014e565b503d61025d565b5f80fd5b3461027c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c5773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660805260206080f35b5f5b8381106102ff5750505f910152565b81810151838201526020016102f0565b602080820190808352835180925260408301928160408460051b8301019501935f915b8483106103425750505050505090565b909192939495848080837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8c516103af815180928187528780880191016102ee565b011601019801930193019194939290610332565b3461027c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c5767ffffffffffffffff60043581811161027c573660238201121561027c57806004013591821161027c573660248360051b8301011161027c5761044791602461043b9201610785565b6040519182918261030f565b0390f35b3461027c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027c57602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761057057604052565b610527565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761057057604052565b9081602091031261027c5751801515810361027c5790565b6040513d5f823e3d90fd5b1561027c57565b9081602091031261027c575190565b67ffffffffffffffff81116105705760051b60200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b91908110156106945760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561027c57019081359167ffffffffffffffff831161027c57602001823603811361027c579190565b610607565b908092918237015f815290565b67ffffffffffffffff811161057057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b3d1561070a573d906106f1826106a6565b916106ff6040519384610575565b82523d5f602084013e565b606090565b60208183031261027c5780519067ffffffffffffffff821161027c570181601f8201121561027c578051610742816106a6565b926107506040519485610575565b8184526020828401011161027c5761076e91602080850191016102ee565b90565b80518210156106945760209160051b010190565b919091610791836105ef565b9060406107a16040519384610575565b8483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06107ce866105ef565b015f5b81811061085b57505082945f5b8181106107ec575050505050565b5f806107f9838588610634565b90610808875180938193610699565b0390305af46108156106e0565b901561083b57906001916108298288610771565b526108348187610771565b50016107de565b604481511061027c5780600461027c92015160248091830101910161070f565b8060606020809388010152016107d1565b9190916040519260208401927fa9059cbb00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff8092166024860152604485015260448452608084019284841067ffffffffffffffff8511176105705761092e9460205f949385948760405216956108f381610554565b527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af16109286106e0565b9161095e565b8051908115918215610944575b50501561027c57565b61095792506020809183010191016105b6565b5f8061093b565b90156109785781511561096f575090565b3b1561027c5790565b50805190811561027c57602001fdfea26469706673582212208602369c5245ef7920a55937d6b0e6d681493b1f712ed2cd18012ffe2a7182b364736f6c63430008170033",
  "devdoc": {
    "details": "Blast USDB withdrawals are a two step process where the L2 to L1 withdrawal must first be finalized via the typical OP Stack mechanism, and then a claim from the withdrawal's *recipient* must be made against a USDBYieldManager contract. This means that the Blast_SpokePool must set its recipient to this contract's address and then an EOA can call this contract to retrieve the DAI.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_dai": "DAI token to be retrieved.",
          "_hubPool": "Where to send DAI to.",
          "_usdYieldManager": "USDCYieldManager contract on Ethereum."
        }
      },
      "retrieve(uint256,uint256)": {
        "params": {
          "_hintId": "Checkpoint hint ID. Can be found by querying USDYieldManager.findCheckpointHint.",
          "_requestId": "L2 withdrawal request ID. Emitted in L1 WithdrawalRequested event when the L2 to L1 withdrawal is first \"finalized\" but still awaiting the recipient to claim the DAI."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs USDB Retriever"
      },
      "retrieve(uint256,uint256)": {
        "notice": "Calls USDCYieldManager contract to release DAI and send to the hubPool. Required to use this function to retrieve DAI since only the L2 withdrawal recipient can make this call.This can revert if the claim is not ready yet. It takes ~12 hours for a Blast admin to make the DAI available for retrieval following withdrawal finalization."
      }
    },
    "notice": "Contract deployed on Ethereum to facilitate DAI transfers from Blast to the HubPool.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1815,
        "contract": "contracts/Blast_DaiRetriever.sol:Blast_DaiRetriever",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}
