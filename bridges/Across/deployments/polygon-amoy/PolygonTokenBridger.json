{
  "address": "0x4e3737679081c4D3029D88cA560918094f2e0284",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        },
        {
          "internalType": "contract PolygonRegistry",
          "name": "_l1PolygonRegistry",
          "type": "address"
        },
        {
          "internalType": "contract WETH9Interface",
          "name": "_l1Weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2WrappedMatic",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l1ChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_l2ChainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MATIC",
      "outputs": [
        {
          "internalType": "contract MaticToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callExit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1PolygonRegistry",
      "outputs": [
        {
          "internalType": "contract PolygonRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Weth",
      "outputs": [
        {
          "internalType": "contract WETH9Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2WrappedMatic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PolygonIERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7de28e352a3dbbca28a1bd2ac4df85090365d2851eb5ee85252291c0dc2447b4",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": null,
    "transactionIndex": 2,
    "gasUsed": "791185",
    "logsBloom": "0x
    "blockHash": "0x4d8fbef7b1ef3ce40d73516a58d8ba20d83ba444e63ad2ea74087e2defa2f28d",
    "transactionHash": "0x7de28e352a3dbbca28a1bd2ac4df85090365d2851eb5ee85252291c0dc2447b4",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 7529773,
        "transactionHash": "0x7de28e352a3dbbca28a1bd2ac4df85090365d2851eb5ee85252291c0dc2447b4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009a8f92a830a5cb89a3816e3d267cb7791c16b04d",
          "0x00000000000000000000000004ba3ef4c023c1006019a0f9baf6e70455e41fcf"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000004375e2b509f0000000000000000000000000000000000000000000000000009d64edd3d648da60000000000000000000000000000000000000000000000941c8af3c4d3e8120500000000000000000000000000000000000000000000000009d2177f1213eea60000000000000000000000000000000000000000000000941c8f2b22ff38b105",
        "logIndex": 3,
        "blockHash": "0x4d8fbef7b1ef3ce40d73516a58d8ba20d83ba444e63ad2ea74087e2defa2f28d"
      }
    ],
    "blockNumber": 7529773,
    "cumulativeGasUsed": "878365",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x14224e63716afAcE30C9a417E0542281869f7d9e",
    "0xfE92F7c3a701e43d8479738c8844bCc555b9e5CD",
    "0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14",
    "0x360ad4f9a9A8EFe9A8DCB5f461c4Cc1047E1Dcf9",
    11155111,
    80002
  ],
  "numDeployments": 1,
  "solcInputHash": "35e2d392a8a60c37ee7fa8da503c0652",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"contract PolygonRegistry\",\"name\":\"_l1PolygonRegistry\",\"type\":\"address\"},{\"internalType\":\"contract WETH9Interface\",\"name\":\"_l1Weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2WrappedMatic\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l1ChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MATIC\",\"outputs\":[{\"internalType\":\"contract MaticToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1PolygonRegistry\",\"outputs\":[{\"internalType\":\"contract PolygonRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Weth\",\"outputs\":[{\"internalType\":\"contract WETH9Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2WrappedMatic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PolygonIERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Because Polygon only allows withdrawals from a particular address to go to that same address on mainnet, we need to have some sort of contract that can guarantee identical addresses on Polygon and Ethereum. This contract is intended to be completely immutable, so it's guaranteed that the contract on each side is  configured identically as long as it is created via create2. create2 is an alternative creation method that uses a different address determination mechanism from normal create. Normal create: address = hash(deployer_address, deployer_nonce) create2:       address = hash(0xFF, sender, salt, bytecode)  This ultimately allows create2 to generate deterministic addresses that don't depend on the transaction count of the sender.\",\"kind\":\"dev\",\"methods\":{\"callExit(bytes)\":{\"params\":{\"data\":\"the proof data to trigger the exit. Can be generated using the maticjs-plasma package.\"}},\"constructor\":{\"params\":{\"_destination\":\"Where to send tokens to for this network.\",\"_l1ChainId\":\"the chain id for the L1 in this environment.\",\"_l1PolygonRegistry\":\"L1 registry that stores updated addresses of polygon contracts. This should always be set to the L1 registry regardless if whether it's deployed on L2 or L1.\",\"_l1Weth\":\"L1 WETH address.\",\"_l2ChainId\":\"the chain id for the L2 in this environment.\",\"_l2WrappedMatic\":\"L2 address of wrapped matic token.\"}},\"retrieve(address)\":{\"params\":{\"token\":\"Token to send to destination.\"}},\"send(address,uint256)\":{\"params\":{\"amount\":\"Amount to bridge.\",\"token\":\"Token to bridge.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"callExit(bytes)\":{\"notice\":\"Called to initiate an l1 exit (withdrawal) of matic tokens that have been sent over the plasma bridge.\"},\"constructor\":{\"notice\":\"Constructs Token Bridger contract.\"},\"retrieve(address)\":{\"notice\":\"Called by someone to send tokens to the destination, which should be set to the HubPool.\"},\"send(address,uint256)\":{\"notice\":\"Called by Polygon SpokePool to send tokens over bridge to contract with the same address as this.The caller of this function must approve this contract to spend amount of token.\"}},\"notice\":\"Contract deployed on Ethereum and Polygon to facilitate token transfers from Polygon to the HubPool and back.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonTokenBridger.sol\":\"PolygonTokenBridger\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x07e881de3b9f6d2c07909f193f24b96c7fe4ea60013260f3f25aecd8bab3c2f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n * @dev The reason why we use this local contract instead of importing from uma/contracts is because of the addition\\n * of the internal method `functionCallStackOriginatesFromOutsideThisContract` which doesn't exist in the one exported\\n * by uma/contracts.\\n */\\ncontract Lockable {\\n    bool internal _notEntered;\\n\\n    constructor() {\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\n        // refund coming into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a nonReentrant function from another nonReentrant function is not supported. It is possible to\\n     * prevent this from happening by making the nonReentrant function external, and making it call a private\\n     * function that does the actual state modification.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a nonReentrant() state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is currently in a non-entered state, meaning that the origination of the call\\n     * came from outside the contract. This is relevant with fallback/receive methods to see if the call came from ETH\\n     * being dropped onto the contract externally or due to ETH dropped on the the contract from within a method in this\\n     * contract, such as unwrapping WETH to ETH within the contract.\\n     */\\n    function functionCallStackOriginatesFromOutsideThisContract() internal view returns (bool) {\\n        return _notEntered;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every nonReentrant() method.\\n    // On entry into a function, _preEntranceCheck() should always be called to check if the function is being\\n    // re-entered. Then, if the function modifies state, it should call _postEntranceSet(), perform its logic, and\\n    // then call _postEntranceReset().\\n    // View-only methods can simply call _preEntranceCheck() to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0xb097e860ea2e8448cd8ee93d1420aecb1d8fb397301941f28754fb6dc90a7be3\",\"license\":\"BUSL-1.1\"},\"contracts/PolygonTokenBridger.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Lockable.sol\\\";\\nimport \\\"./external/interfaces/WETH9Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n// Polygon Registry contract that stores their addresses.\\ninterface PolygonRegistry {\\n    function erc20Predicate() external returns (address);\\n}\\n\\n// Polygon ERC20Predicate contract that handles Plasma exits (only used for Matic).\\ninterface PolygonERC20Predicate {\\n    function startExitWithBurntTokens(bytes calldata data) external;\\n}\\n\\n// ERC20s (on polygon) compatible with polygon's bridge have a withdraw method.\\ninterface PolygonIERC20Upgradeable is IERC20Upgradeable {\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface MaticToken {\\n    function withdraw(uint256 amount) external payable;\\n}\\n\\n/**\\n * @notice Contract deployed on Ethereum and Polygon to facilitate token transfers from Polygon to the HubPool and back.\\n * @dev Because Polygon only allows withdrawals from a particular address to go to that same address on mainnet, we need to\\n * have some sort of contract that can guarantee identical addresses on Polygon and Ethereum. This contract is intended\\n * to be completely immutable, so it's guaranteed that the contract on each side is  configured identically as long as\\n * it is created via create2. create2 is an alternative creation method that uses a different address determination\\n * mechanism from normal create.\\n * Normal create: address = hash(deployer_address, deployer_nonce)\\n * create2:       address = hash(0xFF, sender, salt, bytecode)\\n *  This ultimately allows create2 to generate deterministic addresses that don't depend on the transaction count of the\\n * sender.\\n */\\ncontract PolygonTokenBridger is Lockable {\\n    using SafeERC20Upgradeable for PolygonIERC20Upgradeable;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // Gas token for Polygon.\\n    MaticToken public constant MATIC = MaticToken(0x0000000000000000000000000000000000001010);\\n\\n    // Should be set to HubPool on Ethereum, or unused on Polygon.\\n    address public immutable destination;\\n\\n    // Registry that stores L1 polygon addresses.\\n    PolygonRegistry public immutable l1PolygonRegistry;\\n\\n    // WETH contract on Ethereum.\\n    WETH9Interface public immutable l1Weth;\\n\\n    // Wrapped Matic on Polygon\\n    address public immutable l2WrappedMatic;\\n\\n    // Chain id for the L1 that this contract is deployed on or communicates with.\\n    // For example: if this contract were meant to facilitate transfers from polygon to mainnet, this value would be\\n    // the mainnet chainId 1.\\n    uint256 public immutable l1ChainId;\\n\\n    // Chain id for the L2 that this contract is deployed on or communicates with.\\n    // For example: if this contract were meant to facilitate transfers from polygon to mainnet, this value would be\\n    // the polygon chainId 137.\\n    uint256 public immutable l2ChainId;\\n\\n    modifier onlyChainId(uint256 chainId) {\\n        _requireChainId(chainId);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs Token Bridger contract.\\n     * @param _destination Where to send tokens to for this network.\\n     * @param _l1PolygonRegistry L1 registry that stores updated addresses of polygon contracts. This should always be\\n     * set to the L1 registry regardless if whether it's deployed on L2 or L1.\\n     * @param _l1Weth L1 WETH address.\\n     * @param _l2WrappedMatic L2 address of wrapped matic token.\\n     * @param _l1ChainId the chain id for the L1 in this environment.\\n     * @param _l2ChainId the chain id for the L2 in this environment.\\n     */\\n    constructor(\\n        address _destination,\\n        PolygonRegistry _l1PolygonRegistry,\\n        WETH9Interface _l1Weth,\\n        address _l2WrappedMatic,\\n        uint256 _l1ChainId,\\n        uint256 _l2ChainId\\n    ) {\\n        //slither-disable-next-line missing-zero-check\\n        destination = _destination;\\n        l1PolygonRegistry = _l1PolygonRegistry;\\n        l1Weth = _l1Weth;\\n        //slither-disable-next-line missing-zero-check\\n        l2WrappedMatic = _l2WrappedMatic;\\n        l1ChainId = _l1ChainId;\\n        l2ChainId = _l2ChainId;\\n    }\\n\\n    /**\\n     * @notice Called by Polygon SpokePool to send tokens over bridge to contract with the same address as this.\\n     * @notice The caller of this function must approve this contract to spend amount of token.\\n     * @param token Token to bridge.\\n     * @param amount Amount to bridge.\\n     */\\n    function send(PolygonIERC20Upgradeable token, uint256 amount) public nonReentrant onlyChainId(l2ChainId) {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // In the wMatic case, this unwraps. For other ERC20s, this is the burn/send action.\\n        token.withdraw(token.balanceOf(address(this)));\\n\\n        // This takes the token that was withdrawn and calls withdraw on the \\\"native\\\" ERC20.\\n        if (address(token) == l2WrappedMatic) MATIC.withdraw{ value: address(this).balance }(address(this).balance);\\n    }\\n\\n    /**\\n     * @notice Called by someone to send tokens to the destination, which should be set to the HubPool.\\n     * @param token Token to send to destination.\\n     */\\n    function retrieve(IERC20Upgradeable token) public nonReentrant onlyChainId(l1ChainId) {\\n        if (address(token) == address(l1Weth)) {\\n            // For WETH, there is a pre-deposit step to ensure any ETH that has been sent to the contract is captured.\\n            //slither-disable-next-line arbitrary-send-eth\\n            l1Weth.deposit{ value: address(this).balance }();\\n        }\\n        token.safeTransfer(destination, token.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Called to initiate an l1 exit (withdrawal) of matic tokens that have been sent over the plasma bridge.\\n     * @param data the proof data to trigger the exit. Can be generated using the maticjs-plasma package.\\n     */\\n    function callExit(bytes memory data) public nonReentrant onlyChainId(l1ChainId) {\\n        PolygonERC20Predicate erc20Predicate = PolygonERC20Predicate(l1PolygonRegistry.erc20Predicate());\\n        erc20Predicate.startExitWithBurntTokens(data);\\n    }\\n\\n    receive() external payable {\\n        // This method is empty to avoid any gas expendatures that might cause transfers to fail.\\n        // Note: the fact that there is _no_ code in this function means that matic can be erroneously transferred in\\n        // to the contract on the polygon side. These tokens would be locked indefinitely since the receive function\\n        // cannot be called on the polygon side. While this does have some downsides, the lack of any functionality\\n        // in this function means that it has no chance of running out of gas on transfers, which is a much more\\n        // important benefit. This just makes the matic token risk similar to that of ERC20s that are erroneously\\n        // sent to the contract.\\n    }\\n\\n    function _requireChainId(uint256 chainId) internal view {\\n        require(block.chainid == chainId, \\\"Cannot run method on this chain\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x20d9310eefffbe2de896d313a9a05fe305e66b2533426e4dac731a28b6e81859\",\"license\":\"BUSL-1.1\"},\"contracts/external/interfaces/WETH9Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for the WETH9 contract.\\n */\\ninterface WETH9Interface {\\n    /**\\n     * @notice Burn Wrapped Ether and receive native Ether.\\n     * @param wad Amount of WETH to unwrap and send to caller.\\n     */\\n    function withdraw(uint256 wad) external;\\n\\n    /**\\n     * @notice Lock native Ether and mint Wrapped Ether ERC20\\n     * @dev msg.value is amount of Wrapped Ether to mint/Ether to lock.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Get balance of WETH held by `guy`.\\n     * @param guy Address to get balance of.\\n     * @return wad Amount of WETH held by `guy`.\\n     */\\n    function balanceOf(address guy) external view returns (uint256 wad);\\n\\n    /**\\n     * @notice Transfer `wad` of WETH from caller to `guy`.\\n     * @param guy Address to send WETH to.\\n     * @param wad Amount of WETH to send.\\n     * @return ok True if transfer succeeded.\\n     */\\n    function transfer(address guy, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3f7892554ec7f54681fdd3cc18a41346c246c9c1afba016c52990ef77741f718\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101403461011957601f610e3338819003918201601f19168301916001600160401b0383118484101761011d5780849260c0946040528339810103126101195761004881610131565b60208201516001600160a01b03808216820361011957604084015190811681036101195761007860608501610131565b9160a0608086015195015193600160ff195f5416175f5560805260a05260c05260e05261010091825261012090815260405190610ced9283610146843960805183818161040e01526109c7015260a05183818161055601526106e5015260c0518381816107fe0152610931015260e05183818161029d01526107540152518281816104ef01528181610858015261090701525181818160d201526101830152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036101195756fe6080604081815260049182361015610021575b505050361561001f575f80fd5b005b5f925f3560e01c9182630a79309b1461087b5750816312622e5b14610822578163146bf4b1146107b357816315b550d61461077857816344516d861461070957816368f382481461069a5781637ffae68814610432578163b269681d146103c3578163d0679d34146100f9575063d6ae3cd51461009e5780610012565b346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f557602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b839150346100f557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f55780359273ffffffffffffffffffffffffffffffffffffffff908185168095036103bf57602460ff855416156103bb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0093845f54165f557f000000000000000000000000000000000000000000000000000000000000000046036103b7578251967f23b872dd0000000000000000000000000000000000000000000000000000000060208901523383890152306044890152823560648901526064885260a0880188811067ffffffffffffffff82111761038c57879861020f91869998995282610bb6565b8351947f70a0823100000000000000000000000000000000000000000000000000000000865230838701526020868581855afa958615610382578796610347575b50813b156103395784517f2e1a7d4d0000000000000000000000000000000000000000000000000000000096878252848201528781868183875af1801561033d57908891610325575b50507f000000000000000000000000000000000000000000000000000000000000000016146102d0575b846001875f5416175f5580f35b4791479461101093843b156103215787948651978895869485528401525af19081156103185750610304575b8080806102c3565b61030d90610afa565b6100f55781836102fc565b513d84823e3d90fd5b8780fd5b61032e90610afa565b61033957868a610299565b8680fd5b86513d8a823e3d90fd5b965094506020863d60201161037a575b8161036460209383610b3b565b81010312610376578795519489610250565b5f80fd5b3d9150610357565b85513d89823e3d90fd5b836041847f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b8580fd5b8480fd5b8380fd5b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f5576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90503461069657602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103bf5781359267ffffffffffffffff84116103bb57366023850112156103bb5784848401359461049186610b7c565b9561049e85519788610b3b565b808752366024828401011161069657806024859301838901378601015260ff855416156103bb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0093845f54165f557f000000000000000000000000000000000000000000000000000000000000000046036103b75773ffffffffffffffffffffffffffffffffffffffff83517fb6864976000000000000000000000000000000000000000000000000000000008152838187818b867f0000000000000000000000000000000000000000000000000000000000000000165af190811561068c578891610656575b501691823b1561033957908184939288969551957f7c5264b4000000000000000000000000000000000000000000000000000000008752860152815191826024870152865b83811061063f57505050849184836044827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f878585859a86010152011681010301925af1908115610318575061062b575b506001825f5416175f5580f35b61063490610afa565b6100f557815f61061e565b8181018301518188016044015289975082016105cb565b90508381813d8311610685575b61066d8183610b3b565b8101031261032157518181168103610321575f610586565b503d610663565b85513d8a823e3d90fd5b8280fd5b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f5576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f5576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f557602090516110108152f35b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f5576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f557602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b8491843461037657602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103765780359173ffffffffffffffffffffffffffffffffffffffff9485841695868503610376575f549660ff881615610376577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008098165f557f00000000000000000000000000000000000000000000000000000000000000004603610376578690827f00000000000000000000000000000000000000000000000000000000000000001693848214610a8a575b50602493508451938480927f70a0823100000000000000000000000000000000000000000000000000000000825230898301525afa918215610a80578892610a51575b507fa9059cbb000000000000000000000000000000000000000000000000000000008351968701527f0000000000000000000000000000000000000000000000000000000000000000166024860152604485015260448452608084019184831067ffffffffffffffff841117610a2557505260019291610a1c91610bb6565b5f5416175f5580f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b9091508581813d8311610a79575b610a698183610b3b565b810103126103765751908861099d565b503d610a5f565b83513d8a823e3d90fd5b915091924790803b156103765786835f9381937fd0e30db00000000000000000000000000000000000000000000000000000000083525af18015610af057610ad6575b8291879161095a565b602492919850610ae590610afa565b855f98919250610acd565b84513d5f823e3d90fd5b67ffffffffffffffff8111610b0e57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b0e57604052565b67ffffffffffffffff8111610b0e57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b73ffffffffffffffffffffffffffffffffffffffff169060405191604083019183831067ffffffffffffffff841117610b0e575f8091610c52946040527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602087818099520152858151910182855af13d15610c8a573d91610c3783610b7c565b92610c456040519485610b3b565b83523d5f8685013e610c8e565b8051918215918215610c6a575b505090501561037657565b809250819381010312610376570151801515810361037657805f80610c5f565b6060915b9015610ca857815115610c9f575090565b3b156103765790565b50805190811561037657602001fdfea2646970667358221220dc3ba90ddd6f94697ab32680a95f37d910c6494cb38816303357345926ffe90664736f6c63430008170033",
  "deployedBytecode": "0x6080604081815260049182361015610021575b505050361561001f575f80fd5b005b5f925f3560e01c9182630a79309b1461087b5750816312622e5b14610822578163146bf4b1146107b357816315b550d61461077857816344516d861461070957816368f382481461069a5781637ffae68814610432578163b269681d146103c3578163d0679d34146100f9575063d6ae3cd51461009e5780610012565b346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f557602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5080fd5b839150346100f557827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f55780359273ffffffffffffffffffffffffffffffffffffffff908185168095036103bf57602460ff855416156103bb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0093845f54165f557f000000000000000000000000000000000000000000000000000000000000000046036103b7578251967f23b872dd0000000000000000000000000000000000000000000000000000000060208901523383890152306044890152823560648901526064885260a0880188811067ffffffffffffffff82111761038c57879861020f91869998995282610bb6565b8351947f70a0823100000000000000000000000000000000000000000000000000000000865230838701526020868581855afa958615610382578796610347575b50813b156103395784517f2e1a7d4d0000000000000000000000000000000000000000000000000000000096878252848201528781868183875af1801561033d57908891610325575b50507f000000000000000000000000000000000000000000000000000000000000000016146102d0575b846001875f5416175f5580f35b4791479461101093843b156103215787948651978895869485528401525af19081156103185750610304575b8080806102c3565b61030d90610afa565b6100f55781836102fc565b513d84823e3d90fd5b8780fd5b61032e90610afa565b61033957868a610299565b8680fd5b86513d8a823e3d90fd5b965094506020863d60201161037a575b8161036460209383610b3b565b81010312610376578795519489610250565b5f80fd5b3d9150610357565b85513d89823e3d90fd5b836041847f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b8580fd5b8480fd5b8380fd5b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f5576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b90503461069657602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103bf5781359267ffffffffffffffff84116103bb57366023850112156103bb5784848401359461049186610b7c565b9561049e85519788610b3b565b808752366024828401011161069657806024859301838901378601015260ff855416156103bb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0093845f54165f557f000000000000000000000000000000000000000000000000000000000000000046036103b75773ffffffffffffffffffffffffffffffffffffffff83517fb6864976000000000000000000000000000000000000000000000000000000008152838187818b867f0000000000000000000000000000000000000000000000000000000000000000165af190811561068c578891610656575b501691823b1561033957908184939288969551957f7c5264b4000000000000000000000000000000000000000000000000000000008752860152815191826024870152865b83811061063f57505050849184836044827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f878585859a86010152011681010301925af1908115610318575061062b575b506001825f5416175f5580f35b61063490610afa565b6100f557815f61061e565b8181018301518188016044015289975082016105cb565b90508381813d8311610685575b61066d8183610b3b565b8101031261032157518181168103610321575f610586565b503d610663565b85513d8a823e3d90fd5b8280fd5b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f5576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f5576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f557602090516110108152f35b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f5576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5050346100f557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100f557602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b8491843461037657602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103765780359173ffffffffffffffffffffffffffffffffffffffff9485841695868503610376575f549660ff881615610376577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008098165f557f00000000000000000000000000000000000000000000000000000000000000004603610376578690827f00000000000000000000000000000000000000000000000000000000000000001693848214610a8a575b50602493508451938480927f70a0823100000000000000000000000000000000000000000000000000000000825230898301525afa918215610a80578892610a51575b507fa9059cbb000000000000000000000000000000000000000000000000000000008351968701527f0000000000000000000000000000000000000000000000000000000000000000166024860152604485015260448452608084019184831067ffffffffffffffff841117610a2557505260019291610a1c91610bb6565b5f5416175f5580f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b9091508581813d8311610a79575b610a698183610b3b565b810103126103765751908861099d565b503d610a5f565b83513d8a823e3d90fd5b915091924790803b156103765786835f9381937fd0e30db00000000000000000000000000000000000000000000000000000000083525af18015610af057610ad6575b8291879161095a565b602492919850610ae590610afa565b855f98919250610acd565b84513d5f823e3d90fd5b67ffffffffffffffff8111610b0e57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b0e57604052565b67ffffffffffffffff8111610b0e57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b73ffffffffffffffffffffffffffffffffffffffff169060405191604083019183831067ffffffffffffffff841117610b0e575f8091610c52946040527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564602087818099520152858151910182855af13d15610c8a573d91610c3783610b7c565b92610c456040519485610b3b565b83523d5f8685013e610c8e565b8051918215918215610c6a575b505090501561037657565b809250819381010312610376570151801515810361037657805f80610c5f565b6060915b9015610ca857815115610c9f575090565b3b156103765790565b50805190811561037657602001fdfea2646970667358221220dc3ba90ddd6f94697ab32680a95f37d910c6494cb38816303357345926ffe90664736f6c63430008170033",
  "devdoc": {
    "details": "Because Polygon only allows withdrawals from a particular address to go to that same address on mainnet, we need to have some sort of contract that can guarantee identical addresses on Polygon and Ethereum. This contract is intended to be completely immutable, so it's guaranteed that the contract on each side is  configured identically as long as it is created via create2. create2 is an alternative creation method that uses a different address determination mechanism from normal create. Normal create: address = hash(deployer_address, deployer_nonce) create2:       address = hash(0xFF, sender, salt, bytecode)  This ultimately allows create2 to generate deterministic addresses that don't depend on the transaction count of the sender.",
    "kind": "dev",
    "methods": {
      "callExit(bytes)": {
        "params": {
          "data": "the proof data to trigger the exit. Can be generated using the maticjs-plasma package."
        }
      },
      "constructor": {
        "params": {
          "_destination": "Where to send tokens to for this network.",
          "_l1ChainId": "the chain id for the L1 in this environment.",
          "_l1PolygonRegistry": "L1 registry that stores updated addresses of polygon contracts. This should always be set to the L1 registry regardless if whether it's deployed on L2 or L1.",
          "_l1Weth": "L1 WETH address.",
          "_l2ChainId": "the chain id for the L2 in this environment.",
          "_l2WrappedMatic": "L2 address of wrapped matic token."
        }
      },
      "retrieve(address)": {
        "params": {
          "token": "Token to send to destination."
        }
      },
      "send(address,uint256)": {
        "params": {
          "amount": "Amount to bridge.",
          "token": "Token to bridge."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "callExit(bytes)": {
        "notice": "Called to initiate an l1 exit (withdrawal) of matic tokens that have been sent over the plasma bridge."
      },
      "constructor": {
        "notice": "Constructs Token Bridger contract."
      },
      "retrieve(address)": {
        "notice": "Called by someone to send tokens to the destination, which should be set to the HubPool."
      },
      "send(address,uint256)": {
        "notice": "Called by Polygon SpokePool to send tokens over bridge to contract with the same address as this.The caller of this function must approve this contract to spend amount of token."
      }
    },
    "notice": "Contract deployed on Ethereum and Polygon to facilitate token transfers from Polygon to the HubPool and back.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17473,
        "contract": "contracts/PolygonTokenBridger.sol:PolygonTokenBridger",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}
