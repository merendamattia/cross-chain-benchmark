{
  "address": "0x8654585e4dc09A72248cc97d0Dc4E079df855D82",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IL1GatewayRouter",
          "name": "_l1GatewayRouter",
          "type": "address"
        },
        {
          "internalType": "contract IL1ScrollMessenger",
          "name": "_l1ScrollMessenger",
          "type": "address"
        },
        {
          "internalType": "contract IL2GasPriceOracle",
          "name": "_l2GasPriceOracle",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_l2GasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "l1GatewayRouter",
      "outputs": [
        {
          "internalType": "contract IL1GatewayRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1ScrollMessenger",
      "outputs": [
        {
          "internalType": "contract IL1ScrollMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2GasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2GasPriceOracle",
      "outputs": [
        {
          "internalType": "contract IL2GasPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf12606e9e2ad8b04907e22c6b6521d41805ed2fffa4f3461618ab9333ec7677d",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x8654585e4dc09A72248cc97d0Dc4E079df855D82",
    "transactionIndex": 69,
    "gasUsed": "752361",
    "logsBloom": "0x
    "blockHash": "0xf88a036ca2d553c664b6cd06bb5a07ab4b8ca1f267a6af814217ba1220e584e4",
    "transactionHash": "0xf12606e9e2ad8b04907e22c6b6521d41805ed2fffa4f3461618ab9333ec7677d",
    "logs": [],
    "blockNumber": 5023378,
    "cumulativeGasUsed": "9737375",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x13FBE0D0e5552b8c9c4AE9e2435F38f37355998a",
    "0x50c7d3e7f7c656493D1D76aaa1a836CedfCBB16A",
    "0x247969F4fad93a33d4826046bc3eAE0D36BdE548",
    150000
  ],
  "numDeployments": 7,
  "solcInputHash": "01b9e635159e9f88edd38b42ed83ae01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IL1GatewayRouter\",\"name\":\"_l1GatewayRouter\",\"type\":\"address\"},{\"internalType\":\"contract IL1ScrollMessenger\",\"name\":\"_l1ScrollMessenger\",\"type\":\"address\"},{\"internalType\":\"contract IL2GasPriceOracle\",\"name\":\"_l2GasPriceOracle\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_l2GasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"l1GatewayRouter\",\"outputs\":[{\"internalType\":\"contract IL1GatewayRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ScrollMessenger\",\"outputs\":[{\"internalType\":\"contract IL1ScrollMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2GasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2GasPriceOracle\",\"outputs\":[{\"internalType\":\"contract IL2GasPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_l1GatewayRouter\":\"Standard bridge contract.\",\"_l1ScrollMessenger\":\"Scroll Messenger contract.\",\"_l2GasLimit\":\"Gas limit for relaying messages to L2.\",\"_l2GasPriceOracle\":\"Gas price oracle contract.\"}},\"relayMessage(address,bytes)\":{\"details\":\"This message is marked payable because relaying the message will require a fee that needs to be propagated to the Scroll Bridge. It will not send msg.value to the target contract on L2.\",\"params\":{\"message\":\"Message to send to `target`.\",\"target\":\"L2 address to send message to.\"}},\"relayTokens(address,address,uint256,address)\":{\"details\":\"This method is marked payable because relaying the message might require a fee to be paid by the sender to forward the message to L2. However, it will not send msg.value to the target contract on L2.\",\"params\":{\"amount\":\"Amount of `l1Token` to bridge.\",\"l1Token\":\"L1 token to bridge.\",\"l2Token\":\"L2 token to receive.\",\"to\":\"Bridge recipient.\"}}},\"stateVariables\":{\"l1GatewayRouter\":{\"details\":\"We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts\"},\"l1ScrollMessenger\":{\"details\":\"We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts\"},\"l2GasPriceOracle\":{\"details\":\"We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts\"}},\"title\":\"Scroll_Adapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs new Adapter.\"},\"l1GatewayRouter()\":{\"notice\":\"The address of the official l1GatewayRouter contract for Scroll for bridging tokens from L1 -> L2\"},\"l1ScrollMessenger()\":{\"notice\":\"The address of the official messenger contract for Scroll from L1 -> L2\"},\"l2GasLimit()\":{\"notice\":\"Used as the gas limit for relaying messages to L2.\"},\"l2GasPriceOracle()\":{\"notice\":\"The address of the official gas price oracle contract for Scroll for estimating the relayer fee\"},\"relayMessage(address,bytes)\":{\"notice\":\"Send message to `target` on Scroll.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Send `amount` of `l1Token` to `to` on Scroll. `l2Token` is the Scroll address equivalent of `l1Token`.\"}},\"notice\":\"Adapter contract deployed on L1 alongside the HubPool to facilitate token transfers and arbitrary message relaying from L1 to L2.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/Scroll_Adapter.sol\":\"Scroll_Adapter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@scroll-tech/contracts/L1/IL1ScrollMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {IScrollMessenger} from \\\"../libraries/IScrollMessenger.sol\\\";\\n\\ninterface IL1ScrollMessenger is IScrollMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the maximum number of times each message can be replayed is updated.\\n    /// @param maxReplayTimes The new maximum number of times each message can be replayed.\\n    event UpdateMaxReplayTimes(uint256 maxReplayTimes);\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct L2MessageProof {\\n        // The index of the batch where the message belongs to.\\n        uint256 batchIndex;\\n        // Concatenation of merkle proof for withdraw merkle trie.\\n        bytes merkleProof;\\n    }\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Relay a L2 => L1 message with message proof.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param nonce The nonce of the message to avoid replay attack.\\n    /// @param message The content of the message.\\n    /// @param proof The proof used to verify the correctness of the transaction.\\n    function relayMessageWithProof(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 nonce,\\n        bytes memory message,\\n        L2MessageProof memory proof\\n    ) external;\\n\\n    /// @notice Replay an existing message.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param messageNonce The nonce for the message to replay.\\n    /// @param message The content of the message.\\n    /// @param newGasLimit New gas limit to be used for this message.\\n    /// @param refundAddress The address of account who will receive the refunded fee.\\n    function replayMessage(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 messageNonce,\\n        bytes memory message,\\n        uint32 newGasLimit,\\n        address refundAddress\\n    ) external payable;\\n\\n    /// @notice Drop a skipped message.\\n    /// @param from The address of the sender of the message.\\n    /// @param to The address of the recipient of the message.\\n    /// @param value The msg.value passed to the message call.\\n    /// @param messageNonce The nonce for the message to drop.\\n    /// @param message The content of the message.\\n    function dropMessage(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 messageNonce,\\n        bytes memory message\\n    ) external;\\n}\\n\",\"keccak256\":\"0x717a65ea9569eacbbfd3408b4ace75365f268b280e1712d1ae9213e0353be510\",\"license\":\"MIT\"},\"@scroll-tech/contracts/L1/gateways/IL1ERC20Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IL1ERC20Gateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when ERC20 token is withdrawn from L2 to L1 and transfer to recipient.\\n    /// @param l1Token The address of the token in L1.\\n    /// @param l2Token The address of the token in L2.\\n    /// @param from The address of sender in L2.\\n    /// @param to The address of recipient in L1.\\n    /// @param amount The amount of token withdrawn from L2 to L1.\\n    /// @param data The optional calldata passed to recipient in L1.\\n    event FinalizeWithdrawERC20(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    /// @notice Emitted when someone deposit ERC20 token from L1 to L2.\\n    /// @param l1Token The address of the token in L1.\\n    /// @param l2Token The address of the token in L2.\\n    /// @param from The address of sender in L1.\\n    /// @param to The address of recipient in L2.\\n    /// @param amount The amount of token will be deposited from L1 to L2.\\n    /// @param data The optional calldata passed to recipient in L2.\\n    event DepositERC20(\\n        address indexed l1Token,\\n        address indexed l2Token,\\n        address indexed from,\\n        address to,\\n        uint256 amount,\\n        bytes data\\n    );\\n\\n    /// @notice Emitted when some ERC20 token is refunded.\\n    /// @param token The address of the token in L1.\\n    /// @param recipient The address of receiver in L1.\\n    /// @param amount The amount of token refunded to receiver.\\n    event RefundERC20(address indexed token, address indexed recipient, uint256 amount);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the corresponding l2 token address given l1 token address.\\n    /// @param _l1Token The address of l1 token.\\n    function getL2ERC20Address(address _l1Token) external view returns (address);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Deposit some token to a caller's account on L2.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param _token The address of token in L1.\\n    /// @param _amount The amount of token to transfer.\\n    /// @param _gasLimit Gas limit required to complete the deposit on L2.\\n    function depositERC20(\\n        address _token,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit some token to a recipient's account on L2.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param _token The address of token in L1.\\n    /// @param _to The address of recipient's account on L2.\\n    /// @param _amount The amount of token to transfer.\\n    /// @param _gasLimit Gas limit required to complete the deposit on L2.\\n    function depositERC20(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit some token to a recipient's account on L2 and call.\\n    /// @dev Make this function payable to send relayer fee in Ether.\\n    /// @param _token The address of token in L1.\\n    /// @param _to The address of recipient's account on L2.\\n    /// @param _amount The amount of token to transfer.\\n    /// @param _data Optional data to forward to recipient's account.\\n    /// @param _gasLimit Gas limit required to complete the deposit on L2.\\n    function depositERC20AndCall(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        bytes memory _data,\\n        uint256 _gasLimit\\n    ) external payable;\\n\\n    /// @notice Complete ERC20 withdraw from L2 to L1 and send fund to recipient's account in L1.\\n    /// @dev Make this function payable to handle WETH deposit/withdraw.\\n    ///      The function should only be called by L1ScrollMessenger.\\n    ///      The function should also only be called by L2ERC20Gateway in L2.\\n    /// @param _l1Token The address of corresponding L1 token.\\n    /// @param _l2Token The address of corresponding L2 token.\\n    /// @param _from The address of account who withdraw the token in L2.\\n    /// @param _to The address of recipient in L1 to receive the token.\\n    /// @param _amount The amount of the token to withdraw.\\n    /// @param _data Optional data to forward to recipient's account.\\n    function finalizeWithdrawERC20(\\n        address _l1Token,\\n        address _l2Token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xc7671ab2f663ebdb3dfe3ea0c83c75407f70da244962d0089a69b0cdbd586395\",\"license\":\"MIT\"},\"@scroll-tech/contracts/L1/gateways/IL1ETHGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IL1ETHGateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when ETH is withdrawn from L2 to L1 and transfer to recipient.\\n    /// @param from The address of sender in L2.\\n    /// @param to The address of recipient in L1.\\n    /// @param amount The amount of ETH withdrawn from L2 to L1.\\n    /// @param data The optional calldata passed to recipient in L1.\\n    event FinalizeWithdrawETH(address indexed from, address indexed to, uint256 amount, bytes data);\\n\\n    /// @notice Emitted when someone deposit ETH from L1 to L2.\\n    /// @param from The address of sender in L1.\\n    /// @param to The address of recipient in L2.\\n    /// @param amount The amount of ETH will be deposited from L1 to L2.\\n    /// @param data The optional calldata passed to recipient in L2.\\n    event DepositETH(address indexed from, address indexed to, uint256 amount, bytes data);\\n\\n    /// @notice Emitted when some ETH is refunded.\\n    /// @param recipient The address of receiver in L1.\\n    /// @param amount The amount of ETH refunded to receiver.\\n    event RefundETH(address indexed recipient, uint256 amount);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Deposit ETH to caller's account in L2.\\n    /// @param amount The amount of ETH to be deposited.\\n    /// @param gasLimit Gas limit required to complete the deposit on L2.\\n    function depositETH(uint256 amount, uint256 gasLimit) external payable;\\n\\n    /// @notice Deposit ETH to some recipient's account in L2.\\n    /// @param to The address of recipient's account on L2.\\n    /// @param amount The amount of ETH to be deposited.\\n    /// @param gasLimit Gas limit required to complete the deposit on L2.\\n    function depositETH(\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Deposit ETH to some recipient's account in L2 and call the target contract.\\n    /// @param to The address of recipient's account on L2.\\n    /// @param amount The amount of ETH to be deposited.\\n    /// @param data Optional data to forward to recipient's account.\\n    /// @param gasLimit Gas limit required to complete the deposit on L2.\\n    function depositETHAndCall(\\n        address to,\\n        uint256 amount,\\n        bytes calldata data,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Complete ETH withdraw from L2 to L1 and send fund to recipient's account in L1.\\n    /// @dev This function should only be called by L1ScrollMessenger.\\n    ///      This function should also only be called by L1ETHGateway in L2.\\n    /// @param from The address of account who withdraw ETH in L2.\\n    /// @param to The address of recipient in L1 to receive ETH.\\n    /// @param amount The amount of ETH to withdraw.\\n    /// @param data Optional data to forward to recipient's account.\\n    function finalizeWithdrawETH(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x8bbebc0a30e0bca3dcf11c18e392ee590c8a59bad404d82df2e5209481c4e41c\",\"license\":\"MIT\"},\"@scroll-tech/contracts/L1/gateways/IL1GatewayRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport {IL1ETHGateway} from \\\"./IL1ETHGateway.sol\\\";\\nimport {IL1ERC20Gateway} from \\\"./IL1ERC20Gateway.sol\\\";\\n\\ninterface IL1GatewayRouter is IL1ETHGateway, IL1ERC20Gateway {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when the address of ETH Gateway is updated.\\n    /// @param ethGateway The address of new ETH Gateway.\\n    event SetETHGateway(address indexed ethGateway);\\n\\n    /// @notice Emitted when the address of default ERC20 Gateway is updated.\\n    /// @param defaultERC20Gateway The address of new default ERC20 Gateway.\\n    event SetDefaultERC20Gateway(address indexed defaultERC20Gateway);\\n\\n    /// @notice Emitted when the `gateway` for `token` is updated.\\n    /// @param token The address of token updated.\\n    /// @param gateway The corresponding address of gateway updated.\\n    event SetERC20Gateway(address indexed token, address indexed gateway);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the corresponding gateway address for given token address.\\n    /// @param _token The address of token to query.\\n    function getERC20Gateway(address _token) external view returns (address);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Request ERC20 token transfer from users to gateways.\\n    /// @param sender The address of sender to request fund.\\n    /// @param token The address of token to request.\\n    /// @param amount The amount of token to request.\\n    function requestERC20(\\n        address sender,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256);\\n\\n    /************************\\n     * Restricted Functions *\\n     ************************/\\n\\n    /// @notice Update the address of ETH gateway contract.\\n    /// @dev This function should only be called by contract owner.\\n    /// @param _ethGateway The address to update.\\n    function setETHGateway(address _ethGateway) external;\\n\\n    /// @notice Update the address of default ERC20 gateway contract.\\n    /// @dev This function should only be called by contract owner.\\n    /// @param _defaultERC20Gateway The address to update.\\n    function setDefaultERC20Gateway(address _defaultERC20Gateway) external;\\n\\n    /// @notice Update the mapping from token address to gateway address.\\n    /// @dev This function should only be called by contract owner.\\n    /// @param _tokens The list of addresses of tokens to update.\\n    /// @param _gateways The list of addresses of gateways to update.\\n    function setERC20Gateway(address[] memory _tokens, address[] memory _gateways) external;\\n}\\n\",\"keccak256\":\"0x302ca25eb573be433b41a93968a25dd2c675287f23f0cc5963eb83eb3e33e6c5\",\"license\":\"MIT\"},\"@scroll-tech/contracts/L1/rollup/IL2GasPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IL2GasPriceOracle {\\n    /// @notice Estimate fee for cross chain message call.\\n    /// @param _gasLimit Gas limit required to complete the message relay on L2.\\n    function estimateCrossDomainMessageFee(uint256 _gasLimit) external view returns (uint256);\\n\\n    /// @notice Estimate intrinsic gas fee for cross chain message call.\\n    /// @param _message The message to be relayed on L2.\\n    function calculateIntrinsicGasFee(bytes memory _message) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd79d6b0c452312938fe609b0e5cd0748b1cbde7c0dbec5fd359b940adff862a8\",\"license\":\"MIT\"},\"@scroll-tech/contracts/libraries/IScrollMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IScrollMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    /// @notice Emitted when a cross domain message is sent.\\n    /// @param sender The address of the sender who initiates the message.\\n    /// @param target The address of target contract to call.\\n    /// @param value The amount of value passed to the target contract.\\n    /// @param messageNonce The nonce of the message.\\n    /// @param gasLimit The optional gas limit passed to L1 or L2.\\n    /// @param message The calldata passed to the target contract.\\n    event SentMessage(\\n        address indexed sender,\\n        address indexed target,\\n        uint256 value,\\n        uint256 messageNonce,\\n        uint256 gasLimit,\\n        bytes message\\n    );\\n\\n    /// @notice Emitted when a cross domain message is relayed successfully.\\n    /// @param messageHash The hash of the message.\\n    event RelayedMessage(bytes32 indexed messageHash);\\n\\n    /// @notice Emitted when a cross domain message is failed to relay.\\n    /// @param messageHash The hash of the message.\\n    event FailedRelayedMessage(bytes32 indexed messageHash);\\n\\n    /*************************\\n     * Public View Functions *\\n     *************************/\\n\\n    /// @notice Return the sender of a cross domain message.\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /*****************************\\n     * Public Mutating Functions *\\n     *****************************/\\n\\n    /// @notice Send cross chain message from L1 to L2 or L2 to L1.\\n    /// @param target The address of account who receive the message.\\n    /// @param value The amount of ether passed when call target contract.\\n    /// @param message The content of the message.\\n    /// @param gasLimit Gas limit required to complete the message relay on corresponding chain.\\n    function sendMessage(\\n        address target,\\n        uint256 value,\\n        bytes calldata message,\\n        uint256 gasLimit\\n    ) external payable;\\n\\n    /// @notice Send cross chain message from L1 to L2 or L2 to L1.\\n    /// @param target The address of account who receive the message.\\n    /// @param value The amount of ether passed when call target contract.\\n    /// @param message The content of the message.\\n    /// @param gasLimit Gas limit required to complete the message relay on corresponding chain.\\n    /// @param refundAddress The address of account who will receive the refunded fee.\\n    function sendMessage(\\n        address target,\\n        uint256 value,\\n        bytes calldata message,\\n        uint256 gasLimit,\\n        address refundAddress\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x5a39de18b5912b62614eba49a0381b84e57bc339d00cc8b5e1da1adab457ee41\",\"license\":\"MIT\"},\"contracts/chain-adapters/Scroll_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@scroll-tech/contracts/L1/gateways/IL1GatewayRouter.sol\\\";\\nimport \\\"@scroll-tech/contracts/L1/rollup/IL2GasPriceOracle.sol\\\";\\nimport \\\"@scroll-tech/contracts/L1/IL1ScrollMessenger.sol\\\";\\nimport \\\"./interfaces/AdapterInterface.sol\\\";\\n\\n/**\\n * @title Scroll_Adapter\\n * @notice Adapter contract deployed on L1 alongside the HubPool to facilitate token transfers\\n * and arbitrary message relaying from L1 to L2.\\n */\\ncontract Scroll_Adapter is AdapterInterface {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Used as the gas limit for relaying messages to L2.\\n     */\\n    uint32 public immutable l2GasLimit;\\n\\n    /**\\n     * @notice The address of the official l1GatewayRouter contract for Scroll for bridging tokens from L1 -> L2\\n     * @dev We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts\\n     */\\n    IL1GatewayRouter public immutable l1GatewayRouter;\\n\\n    /**\\n     * @notice The address of the official messenger contract for Scroll from L1 -> L2\\n     * @dev We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts\\n     */\\n    IL1ScrollMessenger public immutable l1ScrollMessenger;\\n\\n    /**\\n     * @notice The address of the official gas price oracle contract for Scroll for estimating the relayer fee\\n     * @dev We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts\\n     */\\n    IL2GasPriceOracle public immutable l2GasPriceOracle;\\n\\n    /**************************************\\n     *          PUBLIC FUNCTIONS          *\\n     **************************************/\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _l1GatewayRouter Standard bridge contract.\\n     * @param _l1ScrollMessenger Scroll Messenger contract.\\n     * @param _l2GasPriceOracle Gas price oracle contract.\\n     * @param _l2GasLimit Gas limit for relaying messages to L2.\\n     */\\n    constructor(\\n        IL1GatewayRouter _l1GatewayRouter,\\n        IL1ScrollMessenger _l1ScrollMessenger,\\n        IL2GasPriceOracle _l2GasPriceOracle,\\n        uint32 _l2GasLimit\\n    ) {\\n        l1GatewayRouter = _l1GatewayRouter;\\n        l1ScrollMessenger = _l1ScrollMessenger;\\n        l2GasPriceOracle = _l2GasPriceOracle;\\n        l2GasLimit = _l2GasLimit;\\n    }\\n\\n    /**\\n     * @notice Send message to `target` on Scroll.\\n     * @dev This message is marked payable because relaying the message will require\\n     * a fee that needs to be propagated to the Scroll Bridge. It will not send msg.value\\n     * to the target contract on L2.\\n     * @param target L2 address to send message to.\\n     * @param message Message to send to `target`.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable {\\n        // We can specifically send a message with 0 value to the Scroll Bridge\\n        // and it will not forward any ETH to the target contract on L2. However,\\n        // we need to set the payable value to msg.value to ensure that the Scroll\\n        // Bridge has enough gas to forward the message to L2.\\n        l1ScrollMessenger.sendMessage{ value: _generateRelayerFee() }(target, 0, message, l2GasLimit);\\n        emit MessageRelayed(target, message);\\n    }\\n\\n    /**\\n     * @notice Send `amount` of `l1Token` to `to` on Scroll. `l2Token` is the Scroll address equivalent of `l1Token`.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param l1Token L1 token to bridge.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of `l1Token` to bridge.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable {\\n        IL1GatewayRouter _l1GatewayRouter = l1GatewayRouter;\\n\\n        // Confirm that the l2Token that we're trying to send is the correct counterpart\\n        // address\\n        address _l2Token = _l1GatewayRouter.getL2ERC20Address(l1Token);\\n        require(_l2Token == l2Token, \\\"l2Token Mismatch\\\");\\n\\n        // Bump the allowance\\n        IERC20(l1Token).safeIncreaseAllowance(address(_l1GatewayRouter), amount);\\n\\n        // The scroll bridge handles arbitrary ERC20 tokens and is mindful of\\n        // the official WETH address on-chain. We don't need to do anything specific\\n        // to differentiate between WETH and a separate ERC20.\\n        // Note: This happens due to the L1GatewayRouter.getERC20Gateway() call\\n        // Note: dev docs: https://docs.scroll.io/en/developers/l1-and-l2-bridging/eth-and-erc20-token-bridge/\\n        _l1GatewayRouter.depositERC20{ value: _generateRelayerFee() }(l1Token, to, amount, l2GasLimit);\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n    }\\n\\n    /**************************************\\n     *         INTERNAL FUNCTIONS         *\\n     **************************************/\\n\\n    /**\\n     * @notice Generates the relayer fee for a message to be sent to L2.\\n     * @dev Function will revert if the contract does not have enough ETH to pay the fee.\\n     */\\n    function _generateRelayerFee() internal view returns (uint256 l2Fee) {\\n        l2Fee = l2GasPriceOracle.estimateCrossDomainMessageFee(l2GasLimit);\\n        require(address(this).balance >= l2Fee, \\\"Insufficient ETH balance\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x223428e05e6b8aa02ac781089368bac08180c150e8580a4b94b6540849264f46\",\"license\":\"BUSL-1.1\"},\"contracts/chain-adapters/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n * This interface is implemented by an adapter contract that is deployed on L1.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    /**\\n     * @notice Send message to `target` on L2.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param target L2 address to send message to.\\n     * @param message Message to send to `target`.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    /**\\n     * @notice Send `amount` of `l1Token` to `to` on L2. `l2Token` is the L2 address equivalent of `l1Token`.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param l1Token L1 token to bridge.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of `l1Token` to bridge.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x1d52fcb8b10dc7f260345918c1a90d496a4c9f774402cbd5ebde881b8fed6d50\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x610100346100eb57601f610db838819003918201601f19168301916001600160401b038311848410176100ef578084926080946040528339810103126100eb578051906001600160a01b039081831683036100eb5760208101519082821682036100eb57604081015192831683036100eb57606001519263ffffffff841684036100eb5760a05260c05260e052608052604051610cb4908161010482396080518181816101720152818161024e015281816106470152610a45015260a0518181816102bd0152610434015260c05181818160eb015261032c015260e05181818161039b0152610a870152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604081815260049081361015610015575f80fd5b5f925f3560e01c90816352c8c75c146103bf57508063a4edd2da14610350578063a98f7044146102e1578063ad06895b14610272578063cf6e65b7146102135763e6eb8ade14610063575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020f57610094610934565b91602435928467ffffffffffffffff9182861161020b573660238701121561020b578584013592831161020b576024860195602484369201011161020b5773ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001691610114610a17565b92803b156101fd578492885194859384927fb2267a7b000000000000000000000000000000000000000000000000000000008452168099830152846024830152608060448301528161016b8c8a60848401916109d9565b63ffffffff7f000000000000000000000000000000000000000000000000000000000000000016606483015203925af18015610201576101e9575b50507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4936101e391845194859485528060208601528401916109d9565b0390a180f35b6101f290610957565b6101fd57845f6101a6565b8480fd5b85513d84823e3d90fd5b5080fd5b8280fd5b83823461020b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b83823461020b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b83823461020b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b83823461020b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9291905060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106ff576103f5610934565b9060249384359073ffffffffffffffffffffffffffffffffffffffff958683168093036106ff57604495863595606435978989168099036106ff5789807f000000000000000000000000000000000000000000000000000000000000000016927fc676ad2900000000000000000000000000000000000000000000000000000000875216998a8487015260209586818781875afa90811561092a57908892915f916108ee575b5016036108945786517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523084820152848101839052858183818e5afa90811561088a575f9161085d575b50888101809111610832578751868101917f095ea7b3000000000000000000000000000000000000000000000000000000008352848783015283820152828152608081019167ffffffffffffffff91808410838511176108075760c08101848110848211176107dc575f928f91849384918f528c88527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a082015251925af13d156107ce573d9182116107a357906105de92918a51916105cf8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610998565b82523d5f8a84013e5b8d610b5e565b8051868115918215610783575b5050905015610703576105fc610a17565b92823b156106ff575f938b938a6084948d8c51998a9889977ff219fa6600000000000000000000000000000000000000000000000000000000895288015286015284015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648401525af180156106f5576106b3575b50825195865285015283015260608201527fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b90608090a180f35b60809593919750916106e77fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b979593610957565b5f9791939550919395610679565b84513d5f823e3d90fd5b5f80fd5b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e9150602a608494868951957f08c379a00000000000000000000000000000000000000000000000000000000087528601528401528201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b83809293500103126106ff5785015180151581036106ff5780865f6105eb565b866041877f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b6105de9291506060906105d8565b886041897f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b876041887f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b846011857f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b90508581813d8311610883575b6108748183610998565b810103126106ff57515f6104e7565b503d61086a565b88513d5f823e3d90fd5b7f6c32546f6b656e204d69736d617463680000000000000000000000000000000091506010606494868951957f08c379a0000000000000000000000000000000000000000000000000000000008752860152840152820152fd5b80929350888092503d8311610923575b6109088183610998565b810103126106ff57519080821682036106ff5787915f61049b565b503d6108fe565b89513d5f823e3d90fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036106ff57565b67ffffffffffffffff811161096b57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761096b57604052565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b604051907fd7704bae00000000000000000000000000000000000000000000000000000000825263ffffffff7f000000000000000000000000000000000000000000000000000000000000000016600483015260208260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215610b53575f92610b1f575b50814710610ac157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152fd5b9091506020813d602011610b4b575b81610b3b60209383610998565b810103126106ff5751905f610ab7565b3d9150610b2e565b6040513d5f823e3d90fd5b91929015610bd95750815115610b72575090565b3b15610b7b5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610bec5750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401525f5b848110610c67575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f835f604480968601015201168101030190fd5b818101830151868201604401528593508201610c2756fea264697066735822122037622bf925748cc3dea2e043c527fc323c46fd79335b30ff2ab039aca84e15ff64736f6c63430008170033",
  "deployedBytecode": "0x6080604081815260049081361015610015575f80fd5b5f925f3560e01c90816352c8c75c146103bf57508063a4edd2da14610350578063a98f7044146102e1578063ad06895b14610272578063cf6e65b7146102135763e6eb8ade14610063575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020f57610094610934565b91602435928467ffffffffffffffff9182861161020b573660238701121561020b578584013592831161020b576024860195602484369201011161020b5773ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001691610114610a17565b92803b156101fd578492885194859384927fb2267a7b000000000000000000000000000000000000000000000000000000008452168099830152846024830152608060448301528161016b8c8a60848401916109d9565b63ffffffff7f000000000000000000000000000000000000000000000000000000000000000016606483015203925af18015610201576101e9575b50507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4936101e391845194859485528060208601528401916109d9565b0390a180f35b6101f290610957565b6101fd57845f6101a6565b8480fd5b85513d84823e3d90fd5b5080fd5b8280fd5b83823461020b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b83823461020b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b83823461020b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b83823461020b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261020b576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b9291905060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106ff576103f5610934565b9060249384359073ffffffffffffffffffffffffffffffffffffffff958683168093036106ff57604495863595606435978989168099036106ff5789807f000000000000000000000000000000000000000000000000000000000000000016927fc676ad2900000000000000000000000000000000000000000000000000000000875216998a8487015260209586818781875afa90811561092a57908892915f916108ee575b5016036108945786517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523084820152848101839052858183818e5afa90811561088a575f9161085d575b50888101809111610832578751868101917f095ea7b3000000000000000000000000000000000000000000000000000000008352848783015283820152828152608081019167ffffffffffffffff91808410838511176108075760c08101848110848211176107dc575f928f91849384918f528c88527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a082015251925af13d156107ce573d9182116107a357906105de92918a51916105cf8a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610998565b82523d5f8a84013e5b8d610b5e565b8051868115918215610783575b5050905015610703576105fc610a17565b92823b156106ff575f938b938a6084948d8c51998a9889977ff219fa6600000000000000000000000000000000000000000000000000000000895288015286015284015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648401525af180156106f5576106b3575b50825195865285015283015260608201527fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b90608090a180f35b60809593919750916106e77fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b979593610957565b5f9791939550919395610679565b84513d5f823e3d90fd5b5f80fd5b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e9150602a608494868951957f08c379a00000000000000000000000000000000000000000000000000000000087528601528401528201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b83809293500103126106ff5785015180151581036106ff5780865f6105eb565b866041877f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b6105de9291506060906105d8565b886041897f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b876041887f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b846011857f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b90508581813d8311610883575b6108748183610998565b810103126106ff57515f6104e7565b503d61086a565b88513d5f823e3d90fd5b7f6c32546f6b656e204d69736d617463680000000000000000000000000000000091506010606494868951957f08c379a0000000000000000000000000000000000000000000000000000000008752860152840152820152fd5b80929350888092503d8311610923575b6109088183610998565b810103126106ff57519080821682036106ff5787915f61049b565b503d6108fe565b89513d5f823e3d90fd5b6004359073ffffffffffffffffffffffffffffffffffffffff821682036106ff57565b67ffffffffffffffff811161096b57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761096b57604052565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b604051907fd7704bae00000000000000000000000000000000000000000000000000000000825263ffffffff7f000000000000000000000000000000000000000000000000000000000000000016600483015260208260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa918215610b53575f92610b1f575b50814710610ac157565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e636500000000000000006044820152fd5b9091506020813d602011610b4b575b81610b3b60209383610998565b810103126106ff5751905f610ab7565b3d9150610b2e565b6040513d5f823e3d90fd5b91929015610bd95750815115610b72575090565b3b15610b7b5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610bec5750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401525f5b848110610c67575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f835f604480968601015201168101030190fd5b818101830151868201604401528593508201610c2756fea264697066735822122037622bf925748cc3dea2e043c527fc323c46fd79335b30ff2ab039aca84e15ff64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_l1GatewayRouter": "Standard bridge contract.",
          "_l1ScrollMessenger": "Scroll Messenger contract.",
          "_l2GasLimit": "Gas limit for relaying messages to L2.",
          "_l2GasPriceOracle": "Gas price oracle contract."
        }
      },
      "relayMessage(address,bytes)": {
        "details": "This message is marked payable because relaying the message will require a fee that needs to be propagated to the Scroll Bridge. It will not send msg.value to the target contract on L2.",
        "params": {
          "message": "Message to send to `target`.",
          "target": "L2 address to send message to."
        }
      },
      "relayTokens(address,address,uint256,address)": {
        "details": "This method is marked payable because relaying the message might require a fee to be paid by the sender to forward the message to L2. However, it will not send msg.value to the target contract on L2.",
        "params": {
          "amount": "Amount of `l1Token` to bridge.",
          "l1Token": "L1 token to bridge.",
          "l2Token": "L2 token to receive.",
          "to": "Bridge recipient."
        }
      }
    },
    "stateVariables": {
      "l1GatewayRouter": {
        "details": "We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts"
      },
      "l1ScrollMessenger": {
        "details": "We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts"
      },
      "l2GasPriceOracle": {
        "details": "We can find these (main/test)net deployments here: https://docs.scroll.io/en/developers/scroll-contracts/#scroll-contracts"
      }
    },
    "title": "Scroll_Adapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs new Adapter."
      },
      "l1GatewayRouter()": {
        "notice": "The address of the official l1GatewayRouter contract for Scroll for bridging tokens from L1 -> L2"
      },
      "l1ScrollMessenger()": {
        "notice": "The address of the official messenger contract for Scroll from L1 -> L2"
      },
      "l2GasLimit()": {
        "notice": "Used as the gas limit for relaying messages to L2."
      },
      "l2GasPriceOracle()": {
        "notice": "The address of the official gas price oracle contract for Scroll for estimating the relayer fee"
      },
      "relayMessage(address,bytes)": {
        "notice": "Send message to `target` on Scroll."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Send `amount` of `l1Token` to `to` on Scroll. `l2Token` is the Scroll address equivalent of `l1Token`."
      }
    },
    "notice": "Adapter contract deployed on L1 alongside the HubPool to facilitate token transfers and arbitrary message relaying from L1 to L2.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
