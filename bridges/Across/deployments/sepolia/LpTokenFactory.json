{
  "address": "0xFB87Ac52Bac7ccF497b6053610A9c59B87a0cE7D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        }
      ],
      "name": "createLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3d2214735a4cb47af1e57e4718def613d731575c81884becf648a4bdb3674d3",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0xFB87Ac52Bac7ccF497b6053610A9c59B87a0cE7D",
    "transactionIndex": 5,
    "gasUsed": "2498004",
    "logsBloom": "0x
    "blockHash": "0xbba2ff3cdca93459760358b1ef1d6391ee8a5c6b9d5cbc80cde3f0c9c382d7ab",
    "transactionHash": "0xb3d2214735a4cb47af1e57e4718def613d731575c81884becf648a4bdb3674d3",
    "logs": [],
    "blockNumber": 4911834,
    "cumulativeGasUsed": "2972187",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "163b02ad7abaeb76bdc4da9838fc1d0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"}],\"name\":\"createLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createLpToken(address)\":{\"params\":{\"l1Token\":\"L1 token to name in LP token name.\"},\"returns\":{\"_0\":\"address of new LP token.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createLpToken(address)\":{\"notice\":\"Deploys new LP token for L1 token. Sets caller as minter and burner of token.\"}},\"notice\":\"Factory to create new LP ERC20 tokens that represent a liquidity provider's position. HubPool is the intended client of this contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LpTokenFactory.sol\":\"LpTokenFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uma/core/contracts/common/implementation/ExpandedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./MultiRole.sol\\\";\\nimport \\\"../interfaces/ExpandedIERC20.sol\\\";\\n\\n/**\\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\\n * be the owner who is capable of adding new roles.\\n */\\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\\n    enum Roles {\\n        // Can set the minter and burner.\\n        Owner,\\n        // Addresses that can mint new tokens.\\n        Minter,\\n        // Addresses that can burn tokens that address owns.\\n        Burner\\n    }\\n\\n    uint8 _decimals;\\n\\n    /**\\n     * @notice Constructs the ExpandedERC20.\\n     * @param _tokenName The name which describes the new token.\\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\n     * @param _tokenDecimals The number of decimals to define token precision.\\n     */\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint8 _tokenDecimals\\n    ) ERC20(_tokenName, _tokenSymbol) {\\n        _decimals = _tokenDecimals;\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\\n    }\\n\\n    function decimals() public view virtual override(ERC20) returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\\n     * @param recipient address to mint to.\\n     * @param value amount of tokens to mint.\\n     * @return True if the mint succeeded, or False.\\n     */\\n    function mint(address recipient, uint256 value)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.Minter))\\n        returns (bool)\\n    {\\n        _mint(recipient, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `msg.sender`.\\n     * @param value amount of tokens to burn.\\n     */\\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\\n        _burn(msg.sender, value);\\n    }\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `recipient`.\\n     * @param recipient address to burn tokens from.\\n     * @param value amount of tokens to burn.\\n     * @return True if the burn succeeded, or False.\\n     */\\n    function burnFrom(address recipient, uint256 value)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.Burner))\\n        returns (bool)\\n    {\\n        _burn(recipient, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Add Minter role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The address to which the Minter role is added.\\n     */\\n    function addMinter(address account) external virtual override {\\n        addMember(uint256(Roles.Minter), account);\\n    }\\n\\n    /**\\n     * @notice Add Burner role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The address to which the Burner role is added.\\n     */\\n    function addBurner(address account) external virtual override {\\n        addMember(uint256(Roles.Burner), account);\\n    }\\n\\n    /**\\n     * @notice Reset Owner role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The new holder of the Owner role.\\n     */\\n    function resetOwner(address account) external virtual override {\\n        resetMember(uint256(Roles.Owner), account);\\n    }\\n}\\n\",\"keccak256\":\"0x8201459d3f78a1f97da7c421f2fbb859924d4facfc5fc235ba65d85bf12b2229\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Exclusive {\\n    struct RoleMembership {\\n        address member;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.member == memberToCheck;\\n    }\\n\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\n        roleMembership.member = newMember;\\n    }\\n\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\n        return roleMembership.member;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\n        resetMember(roleMembership, initialMember);\\n    }\\n}\\n\\nlibrary Shared {\\n    struct RoleMembership {\\n        mapping(address => bool) members;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.members[memberToCheck];\\n    }\\n\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\n        roleMembership.members[memberToAdd] = true;\\n    }\\n\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\n        roleMembership.members[memberToRemove] = false;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\n            addMember(roleMembership, initialMembers[i]);\\n        }\\n    }\\n}\\n\\n/**\\n * @title Base class to manage permissions for the derived class.\\n */\\nabstract contract MultiRole {\\n    using Exclusive for Exclusive.RoleMembership;\\n    using Shared for Shared.RoleMembership;\\n\\n    enum RoleType { Invalid, Exclusive, Shared }\\n\\n    struct Role {\\n        uint256 managingRole;\\n        RoleType roleType;\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\n        Shared.RoleMembership sharedRoleMembership;\\n    }\\n\\n    mapping(uint256 => Role) private roles;\\n\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\n     */\\n    modifier onlyRoleHolder(uint256 roleId) {\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\n     */\\n    modifier onlyRoleManager(uint256 roleId) {\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\n     */\\n    modifier onlyExclusive(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\n     */\\n    modifier onlyShared(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Whether `memberToCheck` is a member of roleId.\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\n     * @param roleId the Role to check.\\n     * @param memberToCheck the address to check.\\n     * @return True if `memberToCheck` is a member of `roleId`.\\n     */\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\n        Role storage role = roles[roleId];\\n        if (role.roleType == RoleType.Exclusive) {\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\n        } else if (role.roleType == RoleType.Shared) {\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\n        }\\n        revert(\\\"Invalid roleId\\\");\\n    }\\n\\n    /**\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\n     * initialized, ExclusiveRole.\\n     * @param roleId the ExclusiveRole membership to modify.\\n     * @param newMember the new ExclusiveRole member.\\n     */\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\n     * @param roleId the ExclusiveRole membership to check.\\n     * @return the address of the current ExclusiveRole member.\\n     */\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\n    }\\n\\n    /**\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param newMember the new SharedRole member.\\n     */\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param memberToRemove the current SharedRole member to remove.\\n     */\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes caller from the role, `roleId`.\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\n     * initialized, SharedRole.\\n     * @param roleId the SharedRole membership to modify.\\n     */\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is not initialized.\\n     */\\n    modifier onlyValidRole(uint256 roleId) {\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is initialized.\\n     */\\n    modifier onlyInvalidRole(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMembers` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createSharedRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address[] memory initialMembers\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Shared;\\n        role.managingRole = managingRoleId;\\n        role.sharedRoleMembership.init(initialMembers);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMember` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createExclusiveRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address initialMember\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Exclusive;\\n        role.managingRole = managingRoleId;\\n        role.exclusiveRoleMembership.init(initialMember);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x134c5a2f847832705be631f2b4eb2a3e23a91a2f0e63560abb481e85eeebfae6\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface that includes burn and mint methods.\\n */\\nabstract contract ExpandedIERC20 is IERC20 {\\n    /**\\n     * @notice Burns a specific amount of the caller's tokens.\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\n     */\\n    function burn(uint256 value) external virtual;\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `recipient`.\\n     * @param recipient address to burn tokens from.\\n     * @param value amount of tokens to burn.\\n     */\\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\\n\\n    /**\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n     */\\n    function mint(address to, uint256 value) external virtual returns (bool);\\n\\n    function addMinter(address account) external virtual;\\n\\n    function addBurner(address account) external virtual;\\n\\n    function resetOwner(address account) external virtual;\\n}\\n\",\"keccak256\":\"0xb8252039cba45f1c19cd677f150a9823a5d6e1845cad90e3041d97c96f273c26\",\"license\":\"AGPL-3.0-only\"},\"contracts/LpTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LpTokenFactoryInterface.sol\\\";\\n\\nimport \\\"@uma/core/contracts/common/implementation/ExpandedERC20.sol\\\";\\n\\n/**\\n * @notice Factory to create new LP ERC20 tokens that represent a liquidity provider's position. HubPool is the\\n * intended client of this contract.\\n */\\ncontract LpTokenFactory is LpTokenFactoryInterface {\\n    /**\\n     * @notice Deploys new LP token for L1 token. Sets caller as minter and burner of token.\\n     * @param l1Token L1 token to name in LP token name.\\n     * @return address of new LP token.\\n     */\\n    function createLpToken(address l1Token) public returns (address) {\\n        ExpandedERC20 lpToken = new ExpandedERC20(\\n            _concatenate(\\\"Across V2 \\\", IERC20Metadata(l1Token).name(), \\\" LP Token\\\"), // LP Token Name\\n            _concatenate(\\\"Av2-\\\", IERC20Metadata(l1Token).symbol(), \\\"-LP\\\"), // LP Token Symbol\\n            IERC20Metadata(l1Token).decimals() // LP Token Decimals\\n        );\\n\\n        lpToken.addMinter(msg.sender); // Set the caller as the LP Token's minter.\\n        lpToken.addBurner(msg.sender); // Set the caller as the LP Token's burner.\\n        lpToken.resetOwner(msg.sender); // Set the caller as the LP Token's owner.\\n\\n        return address(lpToken);\\n    }\\n\\n    function _concatenate(\\n        string memory a,\\n        string memory b,\\n        string memory c\\n    ) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b, c));\\n    }\\n}\\n\",\"keccak256\":\"0x284ab77c16c6616682677ff633a034faa89fc631d8e95a8bf3ed9f040f594813\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/LpTokenFactoryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Factory to create new LP ERC20 tokens that represent a liquidity provider's position. HubPool is the\\n * intended client of this contract.\\n */\\ninterface LpTokenFactoryInterface {\\n    /**\\n     * @notice Deploys new LP token for L1 token. Sets caller as minter and burner of token.\\n     * @param l1Token L1 token to name in LP token name.\\n     * @return address of new LP token.\\n     */\\n    function createLpToken(address l1Token) external returns (address);\\n}\\n\",\"keccak256\":\"0x2635ebf23073eee29bc68003658adc1ef705c1d1f1f36f6ed19408f5e0bf7ab6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612c80908161001b8239f35b5f80fdfe608060408181526004908136101562000016575f80fd5b5f803560e01c63fc2f1b6e146200002b575f80fd5b34620003e357602093847ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620003e357833573ffffffffffffffffffffffffffffffffffffffff91828216809203620003e3577f06fdde030000000000000000000000000000000000000000000000000000000081525f818781855afa908115620004ac579062000136915f916200048e575b50855190620000d082620004f8565b600a82527f4163726f73732056322000000000000000000000000000000000000000000000898301528651916200010783620004f8565b600983527f204c5020546f6b656e00000000000000000000000000000000000000000000008a84015262000652565b84517f95d89b410000000000000000000000000000000000000000000000000000000081525f818881865afa9081156200045d57620001ef8893928a925f9162000467575b508851906200018a82620004f8565b8582527f4176322d0000000000000000000000000000000000000000000000000000000084830152895191620001c083620004f8565b600383527f2d4c5000000000000000000000000000000000000000000000000000000000008584015262000652565b938751938480927f313ce5670000000000000000000000000000000000000000000000000000000082525afa9182156200045d575f926200041d575b5085519261259e918285019285841067ffffffffffffffff851117620003f1576200027f86959493620002718b9460ff94620006ad8a396060875260608701906200060d565b858103868f0152906200060d565b931691015203905ff08015620003e7571692833b15620003e35782517f983b2d5600000000000000000000000000000000000000000000000000000000815233828201525f8160248183895af18015620003d957620003c3575b50833b156200039d5782517ff44637ba0000000000000000000000000000000000000000000000000000000081523382820152828160248183895af18015620003b957908391620003a1575b5050833b156200039d578251907f73cc802a0000000000000000000000000000000000000000000000000000000082523390820152818160248183885af18015620003935762000378575b505051908152f35b620003848291620004b6565b62000390578062000370565b80fd5b83513d84823e3d90fd5b5080fd5b620003ac90620004b6565b6200039d57815f62000325565b84513d85823e3d90fd5b620003d0919250620004b6565b5f905f620002d9565b84513d5f823e3d90fd5b5f80fd5b83513d5f823e3d90fd5b60418a7f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b9091508781813d831162000455575b62000438818362000515565b81010312620003e3575160ff81168103620003e357905f6200022b565b503d6200042c565b86513d5f823e3d90fd5b6200048791503d805f833e6200047e818362000515565b8101906200057a565b5f6200017b565b620004a591503d805f833e6200047e818362000515565b5f620000c1565b85513d5f823e3d90fd5b67ffffffffffffffff8111620004cb57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040810190811067ffffffffffffffff821117620004cb57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117620004cb57604052565b5f5b838110620005695750505f910152565b818101518382015260200162000559565b602081830312620003e357805167ffffffffffffffff91828211620003e357019082601f83011215620003e3578151908111620004cb5760405192620005e960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018562000515565b81845260208284010111620003e3576200060a916020808501910162000557565b90565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936200064b8151809281875287808801910162000557565b0116010190565b6200060a91604051938491602093620006748151809287808801910162000557565b83016200068a8251809387808501910162000557565b016200069f8251809386808501910162000557565b010380845201826200051556fe60406080815234620006de576200259e803803806200001e8162000702565b9283398101606082820312620006de5781516001600160401b0390818111620006de57826200004f91850162000728565b60209283850151838111620006de5786916200006d91870162000728565b9401519160ff92838116809103620006de57825191808311620005e9576003908154936001958686811c96168015620006d3575b89871014620006bf578190601f968781116200066c575b50899087831160011462000609575f92620005fd575b50505f1982851b1c191690861b1782555b8751908111620005e95760049788548681811c91168015620005de575b89821014620005cb5790818684931162000578575b50889086831160011462000515575f9262000509575b50505f1982841b1c191690851b1787555b60ff19918260065416176006555f80526005928387526200016c86868b5f20015416620001658162000798565b15620007b7565b5f80528387526002895f2086810187868254161790555f8155013315620004ba5780546001600160a01b031916331790555f8080528488528990208501548616620001b78162000798565b156200046357620001c7620006e2565b5f8152855f52848852620001e787878c5f20015416620001658162000798565b855f52848852828a5f208781016002878254161790555f81550190865f905b620003de575b5050505f805283875285858a5f20015416620002288162000798565b15620003875762000238620006e2565b915f835260025f528488526200025a87878c5f20015416620001658162000798565b60025f52848852895f208681016002868254161790555f81550191855f905b62000303575b50505050505f80528352845f200154166200029a8162000798565b15620002af578251611d799081620008058239f35b608492519162461bcd60e51b8352820152603860248201525f805160206200257e83398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152fd5b8151811015620003815780861b82018901516001600160a01b0316801562000340575f908152848a528b9020805486168817905586018662000279565b60648b858c8f519262461bcd60e51b845283015260248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b6200027f565b885162461bcd60e51b8152808901889052603860248201525f805160206200257e83398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152608490fd5b81518110156200045d5780871b82018a01516001600160a01b031680156200041b575f908152838b528c9020805487168917905587018762000206565b5060648b858c8f519262461bcd60e51b845283015260248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b6200020c565b885162461bcd60e51b8152808901889052603c60248201525f805160206200257e83398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b895162461bcd60e51b8152808a01899052602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b015190505f8062000127565b90879350601f198316918b5f528a5f20925f5b8c82821062000561575050841162000549575b505050811b01875562000138565b01515f1983861b60f8161c191690555f80806200053b565b8385015186558b9790950194938401930162000528565b909150895f52885f208680850160051c8201928b8610620005c1575b918991869594930160051c01915b828110620005b257505062000111565b5f8155859450899101620005a2565b9250819262000594565b60228a634e487b7160e01b5f525260245ffd5b90607f1690620000fc565b634e487b7160e01b5f52604160045260245ffd5b015190505f80620000ce565b90889350601f19831691865f528b5f20925f5b8d8282106200065557505084116200063d575b505050811b018255620000df565b01515f1983871b60f8161c191690555f80806200062f565b8385015186558c979095019493840193016200061c565b909150845f52895f208780850160051c8201928c8610620006b5575b918a91869594930160051c01915b828110620006a6575050620000b8565b5f81558594508a910162000696565b9250819262000688565b634e487b7160e01b5f52602260045260245ffd5b95607f1695620000a1565b5f80fd5b60405190602082016001600160401b03811183821017620005e957604052565b6040519190601f01601f191682016001600160401b03811183821017620005e957604052565b919080601f84011215620006de5782516001600160401b038111620005e9576020906200075e601f8201601f1916830162000702565b92818452828287010111620006de575f5b818110620007845750825f9394955001015290565b85810183015184820184015282016200076f565b60031115620007a357565b634e487b7160e01b5f52602160045260245ffd5b15620007bf57565b60405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fdfe6080604081815260049182361015610015575f80fd5b5f3560e01c90816306fdde031461122d57508063095ea7b3146111e657806318160ddd146111aa57806323b872dd1461107c578063313ce5671461103d5780633950935114610fc557806340c10f1914610eb157806342966c6814610e685780636be7658b14610d5b57806370a0823114610cfa57806373cc802a14610c0957806374d0a67614610ab257806379cc679014610a605780637cdc1cb914610a1357806395d89b411461081a578063983b2d5614610724578063a457c2d714610621578063a9059cbb146105d3578063aaa14ca3146104e9578063ab3545e51461046d578063d97c05be146102f3578063dd62ed3e1461027e5763f44637ba1461011c575f80fd5b3461027a576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576101546113d4565b9060025f526005815261017b600260ff6001865f2001541661017581611454565b14611516565b60025f5260058152610199610194845f205433906117a1565b6115a1565b60025f526005815273ffffffffffffffffffffffffffffffffffffffff6003845f2001921693841561021f5750835f52525f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055339060027f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f5f80a4005b6064918451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b5f80fd5b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576020906102b86113d4565b6102c06113f7565b9073ffffffffffffffffffffffffffffffffffffffff8091165f5260018452825f2091165f528252805f20549051908152f35b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5781359161032d6113f7565b90835f526005602052610353600160ff81865f2001541661034d81611454565b146117bd565b835f52600560205261036c610194845f205433906117a1565b835f52600560205273ffffffffffffffffffffffffffffffffffffffff6002845f200192169283156103ea575050817fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905533917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7465f80a4005b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201527f30783000000000000000000000000000000000000000000000000000000000006064820152fd5b503461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209135805f52600583526104bf600160ff81855f2001541661034d81611454565b5f526005825273ffffffffffffffffffffffffffffffffffffffff6002825f200154169051908152f35b50903461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576105a9903591825f526005602052610540600260ff6001845f2001541661017581611454565b61055261054d33856117a1565b61148b565b825f526005602052600333915f20019073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008154169055565b339033907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af5f80a4005b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209061061a6106106113d4565b60243590336119b9565b5160018152f35b50903461027a57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576106596113d4565b9060243590335f526001602052835f2073ffffffffffffffffffffffffffffffffffffffff84165f52602052835f2054908282106106a15760208561061a8585038733611848565b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b50903461027a57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5761075f6113d4565b600193845f5260058152610780600260ff87865f2001541661017581611454565b845f5260058152610798610194845f205433906117a1565b845f526005815273ffffffffffffffffffffffffffffffffffffffff6003845f2001921693841561021f5750835f52525f20827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f5f80a4005b50903461027a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5781515f928254936001948060011c60018216968715610a09575b60209283831089146109dd57869798838897985290815f146109825750600114610907575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176108db57508291826108d7925282611370565b0390f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f888152929493507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061096c57505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f92820101918193610889565b8054888501870152879450928501928101610931565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610889565b6022887f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b90607f1690610864565b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610a57602092610a506113f7565b90356117a1565b90519015158152f35b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209061061a610a9d6113d4565b610aa961054d33611748565b60243590611bc7565b50903461027a57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57803591610aed6113f7565b835f526005602052610b0d600260ff6001855f2001541661017581611454565b835f526005602052610b26610194835f205433906117a1565b835f52600560205273ffffffffffffffffffffffffffffffffffffffff6003835f20019116928315610bac5750825f526020525f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f5f80a4005b60649060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b50903461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610c426113d4565b905f80526005602052610c62600160ff81865f2001541661034d81611454565b5f80526005602052610c7b610194845f205433906117a1565b5f8052600560205273ffffffffffffffffffffffffffffffffffffffff6002845f200192169283156103ea575050817fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905533905f7f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468180a4005b503461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209073ffffffffffffffffffffffffffffffffffffffff610d4a6113d4565b165f525f8252805f20549051908152f35b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610e296003923591610d9a6113f7565b938491845f526005602052610dbd600260ff6001845f2001541661017581611454565b845f526005602052610dd6610194825f205433906117a1565b845f5260056020525f20019073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008154169055565b73ffffffffffffffffffffffffffffffffffffffff339216907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af5f80a4005b823461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610eaf90610ea861054d33611748565b3533611bc7565b005b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610ee86113d4565b9173ffffffffffffffffffffffffffffffffffffffff60243593610f0e61054d3361162b565b16908115610f6857505f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602085610f49829760025461141a565b6002558484528382528584208181540190558551908152a35160018152f35b60649060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209061061a6110026113d4565b335f5260018452825f2073ffffffffffffffffffffffffffffffffffffffff82165f528452611036602435845f205461141a565b9033611848565b503461027a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209060ff600654169051908152f35b50903461027a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576110b56113d4565b6110bd6113f7565b906044359273ffffffffffffffffffffffffffffffffffffffff82165f526001602052845f20335f52602052845f2054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611124575b60208661061a8787876119b9565b84821061114d57509183916111426020969561061a95033383611848565b919394819350611116565b60649060208751917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b503461027a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576020906002549051908152f35b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209061061a6112236113d4565b6024359033611848565b8391503461027a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a575f92600354936001948060011c60018216968715611366575b60209283831089146109dd57869798838897985290815f1461098257506001146112e95750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176108db57508291826108d7925282611370565b60035f908152929493507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061135057505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f92820101918193610889565b8054888501870152879450928501928101611315565b90607f1690611277565b6020808252825181830181905293925f5b8581106113c0575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6040809697860101520116010190565b818101830151848201604001528201611381565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361027a57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361027a57565b9190820180921161142757565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b6003111561145e57565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b1561149257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f60448201527f6c650000000000000000000000000000000000000000000000000000000000006064820152fd5b1561151d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201527f2053686172656420726f6c6500000000000000000000000000000000000000006064820152fd5b156115a857565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201527f61676572000000000000000000000000000000000000000000000000000000006064820152fd5b60015f5260056020527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017c547f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b9060ff1661168481611454565b600181036116af57506002015473ffffffffffffffffffffffffffffffffffffffff91821691161490565b806116bb600292611454565b1461171e5760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420726f6c6549640000000000000000000000000000000000006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff600392165f520160205260ff60405f20541690565b60025f5260056020527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733b547f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a9060ff1661168481611454565b5f52600560205260405f2060ff60018201541661168481611454565b156117c457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201527f204578636c757369766520726f6c6500000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff80911691821561193657169182156118b25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591835f526001825260405f20855f5282528060405f2055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff809116918215611b435716918215611abf57815f525f60205260405f2054818110611a3b57817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff168015611cbf57805f525f60205260405f205491808310611c3b576020817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef925f958587528684520360408620558060025403600255604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fdfea26469706673582212209693c72522f78cc08ce088fd76ae308d3e870f74133bd9868e6a3655b92d005064736f6c63430008170033417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a264697066735822122012962ab1de2ba8a6cbaa6a5fc3c22890df417b2e700304624bf28e85d51e37d964736f6c63430008170033",
  "deployedBytecode": "0x608060408181526004908136101562000016575f80fd5b5f803560e01c63fc2f1b6e146200002b575f80fd5b34620003e357602093847ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112620003e357833573ffffffffffffffffffffffffffffffffffffffff91828216809203620003e3577f06fdde030000000000000000000000000000000000000000000000000000000081525f818781855afa908115620004ac579062000136915f916200048e575b50855190620000d082620004f8565b600a82527f4163726f73732056322000000000000000000000000000000000000000000000898301528651916200010783620004f8565b600983527f204c5020546f6b656e00000000000000000000000000000000000000000000008a84015262000652565b84517f95d89b410000000000000000000000000000000000000000000000000000000081525f818881865afa9081156200045d57620001ef8893928a925f9162000467575b508851906200018a82620004f8565b8582527f4176322d0000000000000000000000000000000000000000000000000000000084830152895191620001c083620004f8565b600383527f2d4c5000000000000000000000000000000000000000000000000000000000008584015262000652565b938751938480927f313ce5670000000000000000000000000000000000000000000000000000000082525afa9182156200045d575f926200041d575b5085519261259e918285019285841067ffffffffffffffff851117620003f1576200027f86959493620002718b9460ff94620006ad8a396060875260608701906200060d565b858103868f0152906200060d565b931691015203905ff08015620003e7571692833b15620003e35782517f983b2d5600000000000000000000000000000000000000000000000000000000815233828201525f8160248183895af18015620003d957620003c3575b50833b156200039d5782517ff44637ba0000000000000000000000000000000000000000000000000000000081523382820152828160248183895af18015620003b957908391620003a1575b5050833b156200039d578251907f73cc802a0000000000000000000000000000000000000000000000000000000082523390820152818160248183885af18015620003935762000378575b505051908152f35b620003848291620004b6565b62000390578062000370565b80fd5b83513d84823e3d90fd5b5080fd5b620003ac90620004b6565b6200039d57815f62000325565b84513d85823e3d90fd5b620003d0919250620004b6565b5f905f620002d9565b84513d5f823e3d90fd5b5f80fd5b83513d5f823e3d90fd5b60418a7f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b9091508781813d831162000455575b62000438818362000515565b81010312620003e3575160ff81168103620003e357905f6200022b565b503d6200042c565b86513d5f823e3d90fd5b6200048791503d805f833e6200047e818362000515565b8101906200057a565b5f6200017b565b620004a591503d805f833e6200047e818362000515565b5f620000c1565b85513d5f823e3d90fd5b67ffffffffffffffff8111620004cb57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040810190811067ffffffffffffffff821117620004cb57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117620004cb57604052565b5f5b838110620005695750505f910152565b818101518382015260200162000559565b602081830312620003e357805167ffffffffffffffff91828211620003e357019082601f83011215620003e3578151908111620004cb5760405192620005e960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116018562000515565b81845260208284010111620003e3576200060a916020808501910162000557565b90565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936200064b8151809281875287808801910162000557565b0116010190565b6200060a91604051938491602093620006748151809287808801910162000557565b83016200068a8251809387808501910162000557565b016200069f8251809386808501910162000557565b010380845201826200051556fe60406080815234620006de576200259e803803806200001e8162000702565b9283398101606082820312620006de5781516001600160401b0390818111620006de57826200004f91850162000728565b60209283850151838111620006de5786916200006d91870162000728565b9401519160ff92838116809103620006de57825191808311620005e9576003908154936001958686811c96168015620006d3575b89871014620006bf578190601f968781116200066c575b50899087831160011462000609575f92620005fd575b50505f1982851b1c191690861b1782555b8751908111620005e95760049788548681811c91168015620005de575b89821014620005cb5790818684931162000578575b50889086831160011462000515575f9262000509575b50505f1982841b1c191690851b1787555b60ff19918260065416176006555f80526005928387526200016c86868b5f20015416620001658162000798565b15620007b7565b5f80528387526002895f2086810187868254161790555f8155013315620004ba5780546001600160a01b031916331790555f8080528488528990208501548616620001b78162000798565b156200046357620001c7620006e2565b5f8152855f52848852620001e787878c5f20015416620001658162000798565b855f52848852828a5f208781016002878254161790555f81550190865f905b620003de575b5050505f805283875285858a5f20015416620002288162000798565b15620003875762000238620006e2565b915f835260025f528488526200025a87878c5f20015416620001658162000798565b60025f52848852895f208681016002868254161790555f81550191855f905b62000303575b50505050505f80528352845f200154166200029a8162000798565b15620002af578251611d799081620008058239f35b608492519162461bcd60e51b8352820152603860248201525f805160206200257e83398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152fd5b8151811015620003815780861b82018901516001600160a01b0316801562000340575f908152848a528b9020805486168817905586018662000279565b60648b858c8f519262461bcd60e51b845283015260248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b6200027f565b885162461bcd60e51b8152808901889052603860248201525f805160206200257e83398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152608490fd5b81518110156200045d5780871b82018a01516001600160a01b031680156200041b575f908152838b528c9020805487168917905587018762000206565b5060648b858c8f519262461bcd60e51b845283015260248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b6200020c565b885162461bcd60e51b8152808901889052603c60248201525f805160206200257e83398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b895162461bcd60e51b8152808a01899052602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b015190505f8062000127565b90879350601f198316918b5f528a5f20925f5b8c82821062000561575050841162000549575b505050811b01875562000138565b01515f1983861b60f8161c191690555f80806200053b565b8385015186558b9790950194938401930162000528565b909150895f52885f208680850160051c8201928b8610620005c1575b918991869594930160051c01915b828110620005b257505062000111565b5f8155859450899101620005a2565b9250819262000594565b60228a634e487b7160e01b5f525260245ffd5b90607f1690620000fc565b634e487b7160e01b5f52604160045260245ffd5b015190505f80620000ce565b90889350601f19831691865f528b5f20925f5b8d8282106200065557505084116200063d575b505050811b018255620000df565b01515f1983871b60f8161c191690555f80806200062f565b8385015186558c979095019493840193016200061c565b909150845f52895f208780850160051c8201928c8610620006b5575b918a91869594930160051c01915b828110620006a6575050620000b8565b5f81558594508a910162000696565b9250819262000688565b634e487b7160e01b5f52602260045260245ffd5b95607f1695620000a1565b5f80fd5b60405190602082016001600160401b03811183821017620005e957604052565b6040519190601f01601f191682016001600160401b03811183821017620005e957604052565b919080601f84011215620006de5782516001600160401b038111620005e9576020906200075e601f8201601f1916830162000702565b92818452828287010111620006de575f5b818110620007845750825f9394955001015290565b85810183015184820184015282016200076f565b60031115620007a357565b634e487b7160e01b5f52602160045260245ffd5b15620007bf57565b60405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fdfe6080604081815260049182361015610015575f80fd5b5f3560e01c90816306fdde031461122d57508063095ea7b3146111e657806318160ddd146111aa57806323b872dd1461107c578063313ce5671461103d5780633950935114610fc557806340c10f1914610eb157806342966c6814610e685780636be7658b14610d5b57806370a0823114610cfa57806373cc802a14610c0957806374d0a67614610ab257806379cc679014610a605780637cdc1cb914610a1357806395d89b411461081a578063983b2d5614610724578063a457c2d714610621578063a9059cbb146105d3578063aaa14ca3146104e9578063ab3545e51461046d578063d97c05be146102f3578063dd62ed3e1461027e5763f44637ba1461011c575f80fd5b3461027a576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576101546113d4565b9060025f526005815261017b600260ff6001865f2001541661017581611454565b14611516565b60025f5260058152610199610194845f205433906117a1565b6115a1565b60025f526005815273ffffffffffffffffffffffffffffffffffffffff6003845f2001921693841561021f5750835f52525f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055339060027f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f5f80a4005b6064918451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b5f80fd5b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576020906102b86113d4565b6102c06113f7565b9073ffffffffffffffffffffffffffffffffffffffff8091165f5260018452825f2091165f528252805f20549051908152f35b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5781359161032d6113f7565b90835f526005602052610353600160ff81865f2001541661034d81611454565b146117bd565b835f52600560205261036c610194845f205433906117a1565b835f52600560205273ffffffffffffffffffffffffffffffffffffffff6002845f200192169283156103ea575050817fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905533917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7465f80a4005b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201527f30783000000000000000000000000000000000000000000000000000000000006064820152fd5b503461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209135805f52600583526104bf600160ff81855f2001541661034d81611454565b5f526005825273ffffffffffffffffffffffffffffffffffffffff6002825f200154169051908152f35b50903461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576105a9903591825f526005602052610540600260ff6001845f2001541661017581611454565b61055261054d33856117a1565b61148b565b825f526005602052600333915f20019073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008154169055565b339033907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af5f80a4005b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209061061a6106106113d4565b60243590336119b9565b5160018152f35b50903461027a57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576106596113d4565b9060243590335f526001602052835f2073ffffffffffffffffffffffffffffffffffffffff84165f52602052835f2054908282106106a15760208561061a8585038733611848565b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b50903461027a57602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5761075f6113d4565b600193845f5260058152610780600260ff87865f2001541661017581611454565b845f5260058152610798610194845f205433906117a1565b845f526005815273ffffffffffffffffffffffffffffffffffffffff6003845f2001921693841561021f5750835f52525f20827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f5f80a4005b50903461027a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5781515f928254936001948060011c60018216968715610a09575b60209283831089146109dd57869798838897985290815f146109825750600114610907575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176108db57508291826108d7925282611370565b0390f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f888152929493507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061096c57505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f92820101918193610889565b8054888501870152879450928501928101610931565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610889565b6022887f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b90607f1690610864565b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610a57602092610a506113f7565b90356117a1565b90519015158152f35b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209061061a610a9d6113d4565b610aa961054d33611748565b60243590611bc7565b50903461027a57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57803591610aed6113f7565b835f526005602052610b0d600260ff6001855f2001541661017581611454565b835f526005602052610b26610194835f205433906117a1565b835f52600560205273ffffffffffffffffffffffffffffffffffffffff6003835f20019116928315610bac5750825f526020525f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082541617905533917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f5f80a4005b60649060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b50903461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610c426113d4565b905f80526005602052610c62600160ff81865f2001541661034d81611454565b5f80526005602052610c7b610194845f205433906117a1565b5f8052600560205273ffffffffffffffffffffffffffffffffffffffff6002845f200192169283156103ea575050817fffffffffffffffffffffffff000000000000000000000000000000000000000082541617905533905f7f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468180a4005b503461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209073ffffffffffffffffffffffffffffffffffffffff610d4a6113d4565b165f525f8252805f20549051908152f35b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610e296003923591610d9a6113f7565b938491845f526005602052610dbd600260ff6001845f2001541661017581611454565b845f526005602052610dd6610194825f205433906117a1565b845f5260056020525f20019073ffffffffffffffffffffffffffffffffffffffff165f5260205260405f207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008154169055565b73ffffffffffffffffffffffffffffffffffffffff339216907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af5f80a4005b823461027a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610eaf90610ea861054d33611748565b3533611bc7565b005b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a57610ee86113d4565b9173ffffffffffffffffffffffffffffffffffffffff60243593610f0e61054d3361162b565b16908115610f6857505f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef602085610f49829760025461141a565b6002558484528382528584208181540190558551908152a35160018152f35b60649060208451917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209061061a6110026113d4565b335f5260018452825f2073ffffffffffffffffffffffffffffffffffffffff82165f528452611036602435845f205461141a565b9033611848565b503461027a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209060ff600654169051908152f35b50903461027a5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576110b56113d4565b6110bd6113f7565b906044359273ffffffffffffffffffffffffffffffffffffffff82165f526001602052845f20335f52602052845f2054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611124575b60208661061a8787876119b9565b84821061114d57509183916111426020969561061a95033383611848565b919394819350611116565b60649060208751917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b503461027a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a576020906002549051908152f35b503461027a57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a5760209061061a6112236113d4565b6024359033611848565b8391503461027a575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261027a575f92600354936001948060011c60018216968715611366575b60209283831089146109dd57869798838897985290815f1461098257506001146112e95750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff8411838510176108db57508291826108d7925282611370565b60035f908152929493507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b82841061135057505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f92820101918193610889565b8054888501870152879450928501928101611315565b90607f1690611277565b6020808252825181830181905293925f5b8581106113c0575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6040809697860101520116010190565b818101830151848201604001528201611381565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361027a57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361027a57565b9190820180921161142757565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b6003111561145e57565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b1561149257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f60448201527f6c650000000000000000000000000000000000000000000000000000000000006064820152fd5b1561151d57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201527f2053686172656420726f6c6500000000000000000000000000000000000000006064820152fd5b156115a857565b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201527f61676572000000000000000000000000000000000000000000000000000000006064820152fd5b60015f5260056020527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017c547f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b9060ff1661168481611454565b600181036116af57506002015473ffffffffffffffffffffffffffffffffffffffff91821691161490565b806116bb600292611454565b1461171e5760646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420726f6c6549640000000000000000000000000000000000006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff600392165f520160205260ff60405f20541690565b60025f5260056020527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733b547f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a9060ff1661168481611454565b5f52600560205260405f2060ff60018201541661168481611454565b156117c457565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201527f204578636c757369766520726f6c6500000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff80911691821561193657169182156118b25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591835f526001825260405f20855f5282528060405f2055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff809116918215611b435716918215611abf57815f525f60205260405f2054818110611a3b57817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b73ffffffffffffffffffffffffffffffffffffffff168015611cbf57805f525f60205260405f205491808310611c3b576020817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef925f958587528684520360408620558060025403600255604051908152a3565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152fdfea26469706673582212209693c72522f78cc08ce088fd76ae308d3e870f74133bd9868e6a3655b92d005064736f6c63430008170033417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a264697066735822122012962ab1de2ba8a6cbaa6a5fc3c22890df417b2e700304624bf28e85d51e37d964736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createLpToken(address)": {
        "params": {
          "l1Token": "L1 token to name in LP token name."
        },
        "returns": {
          "_0": "address of new LP token."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createLpToken(address)": {
        "notice": "Deploys new LP token for L1 token. Sets caller as minter and burner of token."
      }
    },
    "notice": "Factory to create new LP ERC20 tokens that represent a liquidity provider's position. HubPool is the intended client of this contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
